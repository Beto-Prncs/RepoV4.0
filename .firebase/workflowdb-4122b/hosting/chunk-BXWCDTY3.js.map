{"version":3,"sources":["node_modules/@firebase/storage/dist/index.esm2017.js","node_modules/@angular/fire/fesm2022/angular-fire-storage.mjs"],"sourcesContent":["import { _isFirebaseServerApp, _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n/**\n * Domain name for firebase storage.\n */\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\n * The key in Firebase config json for the storage bucket.\n */\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\n * 1 second\n */\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nclass StorageError extends FirebaseError {\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code, message, status_ = 0) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    this.status_ = status_;\n    /**\n     * Stores custom error data unique to the `StorageError`.\n     */\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n  get status() {\n    return this.status_;\n  }\n  set status(status) {\n    this.status_ = status;\n  }\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nvar StorageErrorCode = /*#__PURE__*/function (StorageErrorCode) {\n  // Shared between all platforms\n  StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\n  StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\n  StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\n  StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\n  StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\n  StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\n  StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\n  StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\n  StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\n  StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n  StorageErrorCode[\"CANCELED\"] = \"canceled\";\n  // JS specific\n  StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\n  StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\n  StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\n  StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\n  StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\n  StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\n  StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\n  StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n  StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\n  StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\n  StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\n  StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\n  StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\n  StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\n  return StorageErrorCode;\n}(StorageErrorCode || {});\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\nfunction objectNotFound(path) {\n  return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\nfunction unauthorizedApp() {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\nfunction missingPolyFill(polyFill) {\n  return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\n}\n/**\n * @internal\n */\nfunction invalidArgument(message) {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\nfunction appDeleted() {\n  return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nfunction invalidRootOperation(name) {\n  return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nfunction invalidFormat(format, message) {\n  return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\n * @param message - A message describing the internal error.\n */\nfunction internalError(message) {\n  throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  get path() {\n    return this.path_;\n  }\n  get isRoot() {\n    return this.path.length === 0;\n  }\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n\n/**\n * A request whose promise always fails.\n */\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n  cancel(_appDelete = false) {}\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nfunction start(doRequest,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n  function triggerCallback(...args) {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n  function responseHandler(success, ...args) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\n * Error codes for requests made by the XhrIo wrapper.\n */\nvar ErrorCode = /*#__PURE__*/function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n  return ErrorCode;\n}(ErrorCode || {});\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nfunction isRetryStatusCode(status, additionalRetryCodes) {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n  // Request Timeout: web server didn't receive full request in time.\n  408,\n  // Too Many Requests: you're getting rate-limited, basically.\n  429];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.retry = retry;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\n   * Actually starts the retry loop.\n   */\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n        if (!hitServer || isRetryStatusCode(status, this.additionalRetryCodes_) && this.retry) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n}\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nfunction getBlob$1(...args) {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nconst StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n}\n/**\n * @internal\n */\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  const b = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if (e.message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  size() {\n    return this.size_;\n  }\n  type() {\n    return this.type_;\n  }\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n  static getBlob(...args) {\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n  uploadData() {\n    return this.data_;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nfunction jsonObjectOrNull(s) {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n/**\n * @return Null if the path is already at the root.\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\nlet mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nclass RequestInfo {\n  constructor(url, method,\n  /**\n   * Returns the value with which to resolve the request's promise. Only called\n   * if the request is successful. Throw from this function to reject the\n   * returned Request's promise with the thrown error.\n   * Note: The XhrIo passed to this function may be reused after this callback\n   * returns. Do not keep a reference to it in any way.\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\n     * Called with the current number of bytes uploaded and total size (-1 if not\n     * computable) of the request body (i.e. used to report upload progress).\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n      // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An event that is triggered on a task.\n * @internal\n */\nconst TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\" /* InternalTaskState.RUNNING */:\n    case \"pausing\" /* InternalTaskState.PAUSING */:\n    case \"canceling\" /* InternalTaskState.CANCELING */:\n      return TaskState.RUNNING;\n    case \"paused\" /* InternalTaskState.PAUSED */:\n      return TaskState.PAUSED;\n    case \"success\" /* InternalTaskState.SUCCESS */:\n      return TaskState.SUCCESS;\n    case \"canceled\" /* InternalTaskState.CANCELED */:\n      return TaskState.CANCELED;\n    case \"error\" /* InternalTaskState.ERROR */:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return (...argsToForward) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride = null;\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n  abort() {\n    this.xhr_.abort();\n  }\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n}\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n}\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nclass UploadTask {\n  isExponentialBackoffExpired() {\n    return this.sleepTime > this.maxSleepTime;\n  }\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref, blob, metadata = null) {\n    /**\n     * Number of bytes transferred so far.\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\" /* InternalTaskState.RUNNING */;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(\"error\" /* InternalTaskState.ERROR */);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(\"error\" /* InternalTaskState.ERROR */);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n  _start() {\n    if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case \"running\" /* InternalTaskState.RUNNING */:\n          callback(authToken, appCheckToken);\n          break;\n        case \"canceling\" /* InternalTaskState.CANCELING */:\n          this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\n          break;\n        case \"pausing\" /* InternalTaskState.PAUSING */:\n          this._transition(\"paused\" /* InternalTaskState.PAUSED */);\n          break;\n      }\n    });\n  }\n  // TODO(andysoto): assert false\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size());\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n        this._transition(\"error\" /* InternalTaskState.ERROR */);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, /*retry=*/false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n      }, this._metadataErrorHandler);\n    });\n  }\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(\"success\" /* InternalTaskState.SUCCESS */);\n      }, this._errorHandler);\n    });\n  }\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred;\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case \"canceling\" /* InternalTaskState.CANCELING */:\n      case \"pausing\" /* InternalTaskState.PAUSING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case \"running\" /* InternalTaskState.RUNNING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case \"paused\" /* InternalTaskState.PAUSED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"canceled\" /* InternalTaskState.CANCELED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"error\" /* InternalTaskState.ERROR */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"success\" /* InternalTaskState.SUCCESS */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n    }\n  }\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\" /* InternalTaskState.PAUSING */:\n        this._transition(\"paused\" /* InternalTaskState.PAUSED */);\n        break;\n      case \"canceling\" /* InternalTaskState.CANCELING */:\n        this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\n        break;\n      case \"running\" /* InternalTaskState.RUNNING */:\n        this._start();\n        break;\n    }\n  }\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(type, nextOrObserver, error, completed) {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\n   * Adds the given observer.\n   */\n  _addObserver(observer) {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n  /**\n   * Removes the given observer.\n   */\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n  _notifyObservers() {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n    }\n  }\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume() {\n    const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ || this._state === \"pausing\" /* InternalTaskState.PAUSING */;\n    if (valid) {\n      this._transition(\"running\" /* InternalTaskState.RUNNING */);\n    }\n    return valid;\n  }\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause() {\n    const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\n    if (valid) {\n      this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\n    }\n    return valid;\n  }\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel() {\n    const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ || this._state === \"pausing\" /* InternalTaskState.PAUSING */;\n    if (valid) {\n      this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\n    }\n    return valid;\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\n   * The full path of this object.\n   */\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage() {\n    return this._service;\n  }\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent() {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ?\n  // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ?\n  // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(ref, accumulator, pageToken) {\n  const opt = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list$1(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n    }\n  }\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retrieved, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n    return url;\n  });\n}\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nclass FirebaseStorageImpl {\n  constructor(\n  /**\n   * FirebaseApp associated with this StorageService instance.\n   */\n  app, _authProvider,\n  /**\n   * @internal\n   */\n  _appCheckProvider,\n  /**\n   * @internal\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\n     * This string can be in the formats:\n     * - host\n     * - host:port\n     */\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host() {\n    return this._host;\n  }\n  set host(host) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n  set maxUploadRetryTime(time) {\n    validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n  set maxOperationRetryTime(time) {\n    validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n  async _getAuthToken() {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({\n      optional: true\n    });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n  async _getAppCheckToken() {\n    if (_isFirebaseServerApp(this.app) && this.app.settings.appCheckToken) {\n      return this.app.settings.appCheckToken;\n    }\n    const appCheck = this._appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n  async makeRequestWithTokens(requestInfo, requestFactory) {\n    const [authToken, appCheckToken] = await Promise.all([this._getAuthToken(), this._getAppCheckToken()]);\n    return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n  }\n}\nconst name = \"@firebase/storage\";\nconst version = \"0.13.7\";\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retrieved, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\n * @internal\n */\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nfunction getStorage(app = getApp(), bucketUrl) {\n  app = getModularInstance(app);\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n  connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n\n/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '');\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\nregisterStorage();\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n","import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getBlob as getBlob$1, getBytes as getBytes$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, getStream as getStream$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\nclass Storage {\n  constructor(auth) {\n    return auth;\n  }\n}\nconst STORAGE_PROVIDER_NAME = 'storage';\nclass StorageInstances {\n  constructor() {\n    return _getAllInstancesOf(STORAGE_PROVIDER_NAME);\n  }\n}\nconst storageInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe(/*#__PURE__*/concatMap(() => from(_getAllInstancesOf(STORAGE_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_STORAGE_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.storage-instances');\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n  const defaultStorage = _getDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n  return defaultStorage && new Storage(defaultStorage);\n}\nfunction storageInstanceFactory(fn) {\n  return (zone, injector) => {\n    const storage = zone.runOutsideAngular(() => fn(injector));\n    return new Storage(storage);\n  };\n}\nconst STORAGE_INSTANCES_PROVIDER = {\n  provide: StorageInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_STORAGE_INSTANCES]]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n  provide: Storage,\n  useFactory: defaultStorageInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_STORAGE_INSTANCES], FirebaseApp]\n};\nlet StorageModule = /*#__PURE__*/(() => {\n  class StorageModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'gcs');\n    }\n    static ɵfac = function StorageModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StorageModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: StorageModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n    });\n  }\n  return StorageModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideStorage(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'gcs');\n  return makeEnvironmentProviders([DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER, {\n    provide: PROVIDED_STORAGE_INSTANCES,\n    useFactory: storageInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps,\n    // Defensively load Auth first, if provided\n    [new Optional(), AuthInstances], [new Optional(), AppCheckInstances], ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst fromTask = /*#__PURE__*/_zoneWrap(fromTask$1, true);\nconst percentage = /*#__PURE__*/_zoneWrap(percentage$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectStorageEmulator = /*#__PURE__*/_zoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = /*#__PURE__*/_zoneWrap(deleteObject$1, true, 2);\nconst getBlob = /*#__PURE__*/_zoneWrap(getBlob$1, true);\nconst getBytes = /*#__PURE__*/_zoneWrap(getBytes$1, true);\nconst getDownloadURL = /*#__PURE__*/_zoneWrap(getDownloadURL$1, true);\nconst getMetadata = /*#__PURE__*/_zoneWrap(getMetadata$1, true);\nconst getStorage = /*#__PURE__*/_zoneWrap(getStorage$1, true);\nconst getStream = /*#__PURE__*/_zoneWrap(getStream$1, true);\nconst list = /*#__PURE__*/_zoneWrap(list$1, true);\nconst listAll = /*#__PURE__*/_zoneWrap(listAll$1, true);\nconst ref = /*#__PURE__*/_zoneWrap(ref$1, true, 2);\nconst updateMetadata = /*#__PURE__*/_zoneWrap(updateMetadata$1, true, 2);\nconst uploadBytes = /*#__PURE__*/_zoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = /*#__PURE__*/_zoneWrap(uploadBytesResumable$1, true);\nconst uploadString = /*#__PURE__*/_zoneWrap(uploadString$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"],"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","StorageError","_StorageError","FirebaseError","code","message","status_","prependCode","status","serverResponse","StorageErrorCode","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","missingPolyFill","polyFill","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","Location","_Location","encode","bucketString","host","bucketLocation","location","bucketDomain","gsModify","loc","gsPath","gsRegex","gsIndices","httpModify","version","firebaseStorageHost","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","groups","i","group","captures","bucketValue","pathValue","FailRequest","error","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","callWithDelay","millis","responseHandler","clearGlobalTimeout","success","waitMillis","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","isString","isNativeBlob","isNativeBlobDefined","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","nextPart","ErrorCode","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","resolve","reject","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","hitServer","wasCanceled","successCode","backoffDone","requestWentThrough","result","e","err","appDelete","wasSuccessCode","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","getBlobBuilder","getBlob$1","BlobBuilder","bb","sliceBlob","blob","end","decodeBase64","encoded","StringFormat","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","hi","lo","percentEncodedBytes_","decoded","hasMinus","hasUnder","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","matches","middle","endsWith","dataUrl","parts","s","FbsBlob","_FbsBlob","elideCopy","size","blobType","startByte","endByte","realBlob","sliced","slice","blobby","val","uint8Arrays","finalLength","merged","index","jsonObjectOrNull","obj","parent","child","childPath","canonicalChildPath","component","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","sizeMapping","addRef","service","generateRef","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","token","base","queryString","toResourceString","RequestInfo","url","method","handler","timeout","handlerCheck","cndn","unknown","metadataHandler","service","mappings","xhr","text","metadata","fromResourceString","downloadUrlHandler","service","mappings","handler","xhr","text","metadata","fromResourceString","handlerCheck","downloadUrlFromResourceString","sharedErrorHandler","location","errorHandler","err","newErr","unauthorizedApp","unauthenticated","quotaExceeded","unauthorized","objectErrorHandler","shared","objectNotFound","getMetadata$2","urlPart","url","makeUrl","method","timeout","requestInfo","RequestInfo","metadataHandler","getDownloadUrl","service","location","mappings","urlPart","url","makeUrl","method","timeout","requestInfo","RequestInfo","downloadUrlHandler","objectErrorHandler","deleteObject$2","service","location","urlPart","url","makeUrl","method","timeout","handler","_xhr","_text","requestInfo","RequestInfo","objectErrorHandler","determineContentType_","metadata","blob","metadataForUpload_","metadataClone","multipartUpload","mappings","headers","genBoundary","str","i","boundary","metadata_","metadataString","toResourceString","preBlobPart","postBlobPart","body","FbsBlob","cannotSliceBlob","urlParams","metadataHandler","sharedErrorHandler","ResumableUploadStatus","current","total","finalized","checkResumeHeader_","xhr","allowed","status","handlerCheck","createResumableUpload","metadataForUpload","isString","getResumableUploadStatus","sizeString","size","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","progressCallback","status_","serverFileWrongSize","bytesLeft","bytesToUpload","startByte","endByte","uploadCommand","text","uploadStatus","newCurrent","TaskState","taskStateFromInternalTaskState","state","Observer","nextOrObserver","error","complete","isFunction","observer","async","f","argsToForward","textFactoryOverride","XhrConnection","ErrorCode","resolve","url","method","body","headers","internalError","key","header","listener","XhrTextConnection","newTextConnection","UploadTask","ref","blob","metadata","getMappings","error","StorageErrorCode","backoffExpired","isRetryStatusCode","retryLimitExceeded","DEFAULT_MIN_SLEEP_TIME_MILLIS","resolve","reject","sizeBefore","loaded","callback","authToken","appCheckToken","requestInfo","createResumableUpload","createRequest","newTextConnection","url","getResumableUploadStatus","statusRequest","status","chunkSize","RESUMABLE_UPLOAD_CHUNK_SIZE","ResumableUploadStatus","continueResumableUpload","e","uploadRequest","newStatus","getMetadata$2","metadataRequest","multipartUpload","multipartRequest","transferred","old","state","wasPaused","canceled","externalState","taskStateFromInternalTaskState","type","nextOrObserver","completed","observer","Observer","onFulfilled","onRejected","i","triggered","TaskState","async","toCall","valid","Reference","_Reference","_service","location","Location","service","lastComponent","newPath","parent","name","invalidRootOperation","uploadBytes$1","ref","data","metadata","requestInfo","multipartUpload","getMappings","FbsBlob","newTextConnection","finalMetadata","uploadBytesResumable$1","UploadTask","uploadString$1","value","format","StringFormat","dataFromString","metadataClone","getDownloadURL$1","ref","requestInfo","getDownloadUrl","getMappings","newTextConnection","url","noDownloadURL","deleteObject$1","deleteObject$2","_getChild$1","childPath","newPath","child","location","Location","Reference","isUrl","path","refFromURL","service","refFromPath","FirebaseStorageImpl","noDefaultBucket","reference","ref$1","serviceOrRef","pathOrUrl","invalidArgument","extractBucket","host","config","bucketString","CONFIG_STORAGE_BUCKET_KEY","connectStorageEmulator$1","storage","port","options","mockUserToken","createMockUserToken","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","DEFAULT_HOST","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","time","validateNumber","__async","auth","tokenData","_isFirebaseServerApp","appCheck","request","loc","requestFactory","authToken","appCheckToken","retry","FailRequest","appDeleted","makeRequest","name","version","STORAGE_TYPE","uploadBytes","ref","data","metadata","getModularInstance","uploadBytes$1","uploadString","value","format","uploadString$1","uploadBytesResumable","uploadBytesResumable$1","getDownloadURL","ref","getModularInstance","getDownloadURL$1","deleteObject","deleteObject$1","serviceOrRef","pathOrUrl","ref$1","getStorage","app","getApp","bucketUrl","getModularInstance","storageInstance","_getProvider","STORAGE_TYPE","emulator","getDefaultEmulatorHostnameAndPort","connectStorageEmulator","storage","host","port","options","connectStorageEmulator$1","factory","container","url","app","authProvider","appCheckProvider","FirebaseStorageImpl","SDK_VERSION","registerStorage","_registerComponent","Component","STORAGE_TYPE","registerVersion","name","version","Storage","auth","STORAGE_PROVIDER_NAME","StorageInstances","ɵgetAllInstancesOf","PROVIDED_STORAGE_INSTANCES","InjectionToken","defaultStorageInstanceFactory","provided","defaultApp","defaultStorage","ɵgetDefaultInstanceOf","STORAGE_PROVIDER_NAME","Storage","storageInstanceFactory","fn","zone","injector","storage","STORAGE_INSTANCES_PROVIDER","StorageInstances","Optional","DEFAULT_STORAGE_INSTANCE_PROVIDER","FirebaseApp","provideStorage","fn","deps","registerVersion","VERSION","makeEnvironmentProviders","DEFAULT_STORAGE_INSTANCE_PROVIDER","STORAGE_INSTANCES_PROVIDER","PROVIDED_STORAGE_INSTANCES","storageInstanceFactory","NgZone","Injector","ɵAngularFireSchedulers","FirebaseApps","Optional","AuthInstances","AppCheckInstances","deleteObject","ɵzoneWrap","getDownloadURL","ɵzoneWrap","getStorage","ɵzoneWrap","ref","ɵzoneWrap","uploadBytes","ɵzoneWrap","uploadBytesResumable","uploadString"],"x_google_ignoreList":[0,1]}