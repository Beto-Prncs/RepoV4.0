{
  "version": 3,
  "sources": ["src/app/functionalities/worker-completetask/worker-completetask.component.ts", "src/app/functionalities/worker-completetask/worker-completetask.component.html"],
  "sourcesContent": ["import { Component, OnInit, OnDestroy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router, RouterModule} from '@angular/router';\nimport { TaskService } from '../../services/task.service';\nimport { Auth } from '@angular/fire/auth';\nimport { Subscription } from 'rxjs';\nimport { Timestamp } from '@angular/fire/firestore';\nimport { Reporte } from '../../models/interfaces';\n\n\n@Component({\n  selector: 'app-worker-completetask',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './worker-completetask.component.html',\n  styleUrl: './worker-completetask.component.scss'\n})\nexport class WorkerCompleteTaskComponent implements OnInit, OnDestroy {\n  private taskService: TaskService = inject(TaskService);\n  private router: Router = inject(Router);\n  private auth: Auth = inject(Auth);\n\n  completedTasks: Reporte[] = [];\n  private subscription?: Subscription;\n  isLoading = true;\n  errorMessage = '';\n  successMessage = '';\n\n  ngOnInit() {\n    console.log('Inicializando componente worker-completetask');\n    this.setupAuthListener();\n  }\n\n  private setupAuthListener(): void {\n    const authSub = this.auth.onAuthStateChanged(user => {\n      if (user) {\n        console.log('Usuario autenticado:', user.uid);\n        this.loadCompletedTasks(user.uid);\n      } else {\n        console.log('No hay usuario autenticado');\n        this.router.navigate(['/login']);\n      }\n    });\n\n    if (authSub) {\n      this.subscription = new Subscription(() => authSub());\n    }\n  }\n\n  private loadCompletedTasks(userId: string): void {\n    const tasksSub = this.taskService.getCompletedReportesByWorker(userId)\n      .subscribe({\n        next: (reportes) => {\n          console.log('Reportes completados recibidos:', reportes);\n          this.completedTasks = reportes;\n          this.isLoading = false;\n        },\n        error: (error) => {\n          console.error('Error al cargar reportes completados:', error);\n          this.showError('Error al cargar los reportes completados');\n          this.isLoading = false;\n        }\n      });\n\n    if (tasksSub) {\n      if (this.subscription) {\n        this.subscription.add(tasksSub);\n      } else {\n        this.subscription = tasksSub;\n      }\n    }\n  }\n\n  convertToDate(fecha: Date | Timestamp): Date {\n    if (fecha instanceof Timestamp) {\n      return fecha.toDate();\n    }\n    return fecha as Date;\n  }\n\n  formatDate(date: Date | Timestamp): string {\n    const dateObj = this.convertToDate(date);\n    return new Intl.DateTimeFormat('es', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(dateObj);\n  }\n\n  getStatusClass(estado: string): string {\n    switch (estado.toLowerCase()) {\n      case 'completado':\n        return 'status-completed';\n      case 'pendiente':  \n        return 'status-pending';\n      default:\n        return 'status-default';\n    }\n  }\n\n  getPriorityClass(priority: string): string {\n    switch (priority.toLowerCase()) {\n      case 'alta':\n        return 'priority-high';\n      case 'media':\n        return 'priority-medium';\n      case 'baja':\n        return 'priority-low';\n      default:\n        return 'priority-default';\n    }\n  }\n\n  private showError(message: string): void {\n    this.errorMessage = message;\n    setTimeout(() => {\n      this.errorMessage = '';\n    }, 5000);\n  }\n\n  private showSuccess(message: string): void {\n    this.successMessage = message;\n    setTimeout(() => {\n      this.successMessage = '';\n    }, 3000);\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  goBack(): void {\n    this.router.navigate(['/worker']);\n  }\n}", "<div class=\"tasks-container\">\n  <button class=\"btn-back\" (click)=\"goBack()\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n      <line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\"></line>\n      <polyline points=\"12 19 5 12 12 5\"></polyline>\n    </svg>\n    Atrás\n  </button>\n\n  <h2>Reportes Completados</h2>\n\n  <!-- Mensajes de estado -->\n  <div *ngIf=\"errorMessage\" class=\"alert alert-error\">\n    {{ errorMessage }}\n  </div>\n\n  <div *ngIf=\"successMessage\" class=\"alert alert-success\">\n    {{ successMessage }}\n  </div>\n\n  <!-- Estado de carga -->\n  <div *ngIf=\"isLoading\" class=\"loading-state\">\n    <p>Cargando reportes completados...</p>\n  </div>\n\n  <!-- Sin reportes -->\n  <div *ngIf=\"!isLoading && completedTasks.length === 0\" class=\"no-tasks\">\n    <p>No hay reportes completados.</p>\n  </div>\n\n  <!-- Lista de reportes completados -->\n  <div *ngIf=\"!isLoading && completedTasks.length > 0\" class=\"tasks-grid\">\n    <div *ngFor=\"let task of completedTasks\" class=\"task-card\">\n      <div class=\"task-header\">\n        <h3>{{task.Tipo_Trabajo}}</h3>\n        <span class=\"task-date\">Completado: {{formatDate(task.fechaCompletado || task.fecha)}}</span>\n      </div>\n\n      <div class=\"task-content\">\n        <!-- Información principal -->\n        <div class=\"task-info\">\n          <p *ngIf=\"task.jobDescription\" class=\"task-description\">\n            <strong>Descripción:</strong> {{task.jobDescription}}\n          </p>\n          <p *ngIf=\"task.location\" class=\"task-location\">\n            <strong>Ubicación:</strong> {{task.location}}\n          </p>\n          \n          <!-- Etiquetas de estado y prioridad -->\n          <div class=\"task-tags\">\n            <span class=\"status-badge\" [ngClass]=\"getStatusClass(task.estado)\">\n              {{task.estado}}\n            </span>\n            <span *ngIf=\"task.priority\" class=\"priority-badge\" [ngClass]=\"getPriorityClass(task.priority)\">\n              {{task.priority}}\n            </span>\n          </div>\n\n          <p *ngIf=\"task.departamento\" class=\"task-department\">\n            <strong>Departamento:</strong> {{task.departamento}}\n          </p>\n        </div>\n\n        <!-- Descripción de completación -->\n        <div *ngIf=\"task.descripcionCompletado\" class=\"completion-description\">\n          <strong>Descripción del trabajo</strong>\n          <p>{{task.descripcionCompletado}}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r0", "errorMessage", "successMessage", "task_r2", "jobDescription", "location", "\u0275\u0275property", "getPriorityClass", "priority", "departamento", "\u0275\u0275textInterpolate", "descripcionCompletado", "\u0275\u0275template", "WorkerCompleteTaskComponent_div_12_div_1_p_8_Template", "WorkerCompleteTaskComponent_div_12_div_1_p_9_Template", "WorkerCompleteTaskComponent_div_12_div_1_span_13_Template", "WorkerCompleteTaskComponent_div_12_div_1_p_14_Template", "WorkerCompleteTaskComponent_div_12_div_1_div_15_Template", "Tipo_Trabajo", "formatDate", "fechaCompletado", "fecha", "getStatusClass", "estado", "WorkerCompleteTaskComponent_div_12_div_1_Template", "completedTasks", "WorkerCompleteTaskComponent", "taskService", "inject", "TaskService", "router", "Router", "auth", "Auth", "subscription", "isLoading", "ngOnInit", "console", "log", "setupAuthListener", "authSub", "onAuthStateChanged", "user", "uid", "loadCompletedTasks", "navigate", "Subscription", "userId", "tasksSub", "getCompletedReportesByWorker", "subscribe", "next", "reportes", "error", "showError", "add", "convertToDate", "Timestamp", "toDate", "date", "dateObj", "Intl", "DateTimeFormat", "year", "month", "day", "hour", "minute", "format", "toLowerCase", "message", "setTimeout", "showSuccess", "ngOnDestroy", "unsubscribe", "goBack", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "\u0275\u0275element", "WorkerCompleteTaskComponent_div_8_Template", "WorkerCompleteTaskComponent_div_9_Template", "WorkerCompleteTaskComponent_div_10_Template", "WorkerCompleteTaskComponent_div_11_Template", "WorkerCompleteTaskComponent_div_12_Template", "length", "CommonModule", "NgClass", "NgForOf", "NgIf", "RouterModule", "styles"]
}
