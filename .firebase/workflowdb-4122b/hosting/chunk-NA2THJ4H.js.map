{
  "version": 3,
  "sources": ["src/app/Components/recuperar-contrasena/recuperar-contrasena.component.ts", "src/app/Components/recuperar-contrasena/recuperar-contrasena.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-recuperar-contrasena',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './recuperar-contrasena.component.html',\n  styleUrl: './recuperar-contrasena.component.scss'\n})\nexport class RecuperarContrasenaComponent {\n  // Estados generales\n  step = 1; // 1: Solicitud de correo, 2: Confirmación envío, 3: Establecer nueva contraseña, 4: Éxito\n  isLoading = false;\n  message = '';\n  messageType: 'error' | 'success' = 'error';\n  \n  // Datos del formulario\n  email = '';\n  newPassword = '';\n  confirmPassword = '';\n  showPassword = false;\n  \n  // Código de verificación (de la URL)\n  actionCode = '';\n  \n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n  \n  ngOnInit() {\n    // Verificar si hay un código de acción en la URL (para reseteo de contraseña)\n    this.route.queryParams.subscribe(params => {\n      const oobCode = params['oobCode'];\n      const mode = params['mode'];\n      \n      if (mode === 'resetPassword' && oobCode) {\n        this.actionCode = oobCode;\n        this.step = 3; // Pasar al formulario de nueva contraseña\n        \n        // Verificar que el código sea válido\n        this.verifyActionCode(oobCode);\n      }\n    });\n  }\n  \n  /**\n   * Verifica que el código de acción sea válido\n   */\n  async verifyActionCode(code: string) {\n    this.isLoading = true;\n    this.message = '';\n    \n    try {\n      // Verificar el código (esto también devuelve el email asociado)\n      await this.authService.verifyPasswordResetCode(code);\n      \n      // Si llega aquí, el código es válido\n      this.isLoading = false;\n    } catch (error) {\n      console.error('Error verificando código:', error);\n      this.message = 'El enlace ha expirado o no es válido. Por favor, solicita un nuevo correo de recuperación.';\n      this.messageType = 'error';\n      this.isLoading = false;\n      \n      // Redirigir al paso 1 después de 3 segundos\n      setTimeout(() => {\n        this.step = 1;\n      }, 3000);\n    }\n  }\n  \n  /**\n   * Envía el correo de recuperación\n   */\n  async sendRecoveryEmail() {\n    if (!this.email) {\n      this.message = 'Por favor, ingresa tu correo electrónico';\n      this.messageType = 'error';\n      return;\n    }\n    \n    this.isLoading = true;\n    this.message = '';\n    \n    try {\n      await this.authService.sendPasswordResetEmail(this.email);\n      \n      // Mostrar mensaje de éxito\n      this.step = 2;\n    } catch (error: any) {\n      this.message = error.message || 'Error al enviar el correo. Verifica que el correo electrónico sea correcto.';\n      this.messageType = 'error';\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  \n  /**\n   * Establece la nueva contraseña\n   */\n  async resetPassword() {\n    if (!this.newPassword || !this.confirmPassword) {\n      this.message = 'Por favor, completa todos los campos';\n      this.messageType = 'error';\n      return;\n    }\n    \n    if (this.newPassword !== this.confirmPassword) {\n      this.message = 'Las contraseñas no coinciden';\n      this.messageType = 'error';\n      return;\n    }\n    \n    if (this.newPassword.length < 6) {\n      this.message = 'La contraseña debe tener al menos 6 caracteres';\n      this.messageType = 'error';\n      return;\n    }\n    \n    this.isLoading = true;\n    this.message = '';\n    \n    try {\n      // Confirmar el cambio de contraseña\n      await this.authService.confirmPasswordReset(this.actionCode, this.newPassword);\n      \n      // Mostrar mensaje de éxito\n      this.step = 4;\n    } catch (error: any) {\n      this.message = error.message || 'Error al cambiar la contraseña. Por favor, intenta nuevamente.';\n      this.messageType = 'error';\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  \n  /**\n   * Navega a la página de login\n   */\n  goToLogin() {\n    this.router.navigate(['/login']);\n  }\n  \n  /**\n   * Muestra/oculta la contraseña\n   */\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n}\n", "<div class=\"container\">\n    <div class=\"card\">\n      <img src=\"icons/logo_Repo.png\" alt=\"Logo de la Aplicación\" class=\"app-logo\" />\n      <div class=\"card-header\">Recuperación de Contraseña</div>\n      <div class=\"card-body\">\n        <!-- Paso 1: Ingreso de correo -->\n        <div *ngIf=\"step === 1\">\n          <p>Ingresa tu correo electrónico para recibir instrucciones de recuperación</p>\n          \n          <div *ngIf=\"message\" class=\"message\" [ngClass]=\"{'error': messageType === 'error', 'success': messageType === 'success'}\">\n            {{ message }}\n          </div>\n          \n          <form class=\"reset-form\">\n            <label>Correo electrónico</label>\n            <input\n              type=\"email\"\n              placeholder=\"Ingresa tu correo\"\n              [(ngModel)]=\"email\"\n              name=\"email\"\n              [class.input-error]=\"messageType === 'error'\">\n            \n            <button \n              type=\"button\" \n              (click)=\"sendRecoveryEmail()\" \n              class=\"auth-button-primary\"\n              [disabled]=\"isLoading || !email\">\n              <span *ngIf=\"!isLoading\">Enviar instrucciones</span>\n              <span *ngIf=\"isLoading\" class=\"loader-container\">\n                <svg class=\"spinner\" viewBox=\"0 0 50 50\">\n                  <circle class=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"5\"></circle>\n                </svg>\n                Enviando...\n              </span>\n            </button>\n            \n            <button type=\"button\" (click)=\"goToLogin()\" class=\"auth-button-secondary\">\n              Volver al inicio de sesión\n            </button>\n          </form>\n        </div>\n        \n        <!-- Paso 2: Confirmación de envío -->\n        <div *ngIf=\"step === 2\">\n          <div class=\"success-icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M22 11.08V12a10 10 0 11-5.93-9.14\"></path>\n              <path d=\"M22 4L12 14.01l-3-3\"></path>\n            </svg>\n          </div>\n          <h2>Correo enviado</h2>\n          <p>Hemos enviado instrucciones para recuperar tu contraseña a <strong>{{ email }}</strong></p>\n          <p>Revisa tu bandeja de entrada y sigue las instrucciones en el correo.</p>\n          <button type=\"button\" (click)=\"goToLogin()\" class=\"auth-button-primary\">\n            Volver al inicio de sesión\n          </button>\n        </div>\n        \n        <!-- Paso 3: Ingreso de nueva contraseña (después de clic en link de correo) -->\n        <div *ngIf=\"step === 3\">\n          <h2>Establece una nueva contraseña</h2>\n          \n          <div *ngIf=\"message\" class=\"message\" [ngClass]=\"{'error': messageType === 'error', 'success': messageType === 'success'}\">\n            {{ message }}\n          </div>\n          \n          <form class=\"reset-form\">\n            <label>Nueva contraseña</label>\n            <div class=\"password-input\">\n              <input\n                [type]=\"showPassword ? 'text' : 'password'\"\n                placeholder=\"Nueva contraseña\"\n                [(ngModel)]=\"newPassword\"\n                name=\"newPassword\"\n                [class.input-error]=\"messageType === 'error'\">\n              <button\n                type=\"button\"\n                class=\"toggle-password\"\n                (click)=\"togglePasswordVisibility()\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\n                  <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n                  <path d=\"M3 3l18 18\" [style.display]=\"showPassword ? 'inline' : 'none'\"></path>\n                </svg>\n              </button>\n            </div>\n            \n            <label>Confirmar contraseña</label>\n            <input\n              type=\"password\"\n              placeholder=\"Confirmar contraseña\"\n              [(ngModel)]=\"confirmPassword\"\n              name=\"confirmPassword\"\n              [class.input-error]=\"messageType === 'error'\">\n            \n            <button \n              type=\"button\" \n              (click)=\"resetPassword()\" \n              class=\"auth-button-primary\"\n              [disabled]=\"isLoading || !newPassword || !confirmPassword\">\n              <span *ngIf=\"!isLoading\">Cambiar contraseña</span>\n              <span *ngIf=\"isLoading\" class=\"loader-container\">\n                <svg class=\"spinner\" viewBox=\"0 0 50 50\">\n                  <circle class=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"5\"></circle>\n                </svg>\n                Procesando...\n              </span>\n            </button>\n          </form>\n        </div>\n        \n        <!-- Paso 4: Confirmación de cambio exitoso -->\n        <div *ngIf=\"step === 4\">\n          <div class=\"success-icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M22 11.08V12a10 10 0 11-5.93-9.14\"></path>\n              <path d=\"M22 4L12 14.01l-3-3\"></path>\n            </svg>\n          </div>\n          <h2>¡Contraseña actualizada!</h2>\n          <p>Tu contraseña ha sido cambiada exitosamente.</p>\n          <button type=\"button\" (click)=\"goToLogin()\" class=\"auth-button-primary\">\n            Iniciar sesión\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "\u0275\u0275pureFunction2", "_c0", "ctx_r1", "messageType", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "message", "\u0275\u0275element", "\u0275\u0275template", "RecuperarContrasenaComponent_div_6_div_3_Template", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275restoreView", "_r1", "\u0275\u0275nextContext", "i0", "\u0275\u0275twoWayBindingSet", "email", "\u0275\u0275resetView", "\u0275\u0275listener", "sendRecoveryEmail", "RecuperarContrasenaComponent_div_6_span_9_Template", "RecuperarContrasenaComponent_div_6_span_10_Template", "goToLogin", "\u0275\u0275classProp", "\u0275\u0275twoWayProperty", "isLoading", "_r3", "\u0275\u0275textInterpolate", "RecuperarContrasenaComponent_div_8_div_3_Template", "_r4", "newPassword", "togglePasswordVisibility", "confirmPassword", "resetPassword", "RecuperarContrasenaComponent_div_8_span_18_Template", "RecuperarContrasenaComponent_div_8_span_19_Template", "showPassword", "\u0275\u0275styleProp", "_r5", "RecuperarContrasenaComponent", "authService", "router", "route", "step", "actionCode", "constructor", "ngOnInit", "queryParams", "subscribe", "params", "oobCode", "verifyActionCode", "code", "__async", "verifyPasswordResetCode", "error", "console", "setTimeout", "sendPasswordResetEmail", "length", "confirmPasswordReset", "navigate", "\u0275\u0275directiveInject", "AuthService", "Router", "ActivatedRoute", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "RecuperarContrasenaComponent_div_6_Template", "RecuperarContrasenaComponent_div_7_Template", "RecuperarContrasenaComponent_div_8_Template", "RecuperarContrasenaComponent_div_9_Template", "CommonModule", "NgClass", "NgIf", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "styles"]
}
