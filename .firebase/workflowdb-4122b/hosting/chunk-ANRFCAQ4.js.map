{
  "version": 3,
  "sources": ["src/app/functionalities/worker-completetask/worker-completetask.component.ts", "src/app/functionalities/worker-completetask/worker-completetask.component.html"],
  "sourcesContent": ["import { Component, OnInit, OnDestroy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { \n  Firestore, \n  collection, \n  query, \n  where, \n  getDocs, \n  collectionData,\n  doc,\n  getDoc\n} from '@angular/fire/firestore';\nimport { Auth } from '@angular/fire/auth';\nimport { FormsModule } from '@angular/forms';\nimport { PdfViewerModule } from 'ng2-pdf-viewer';\nimport { Subscription, BehaviorSubject, from } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { Reporte, Usuario } from '../../models/interfaces';\nimport { TaskService } from '../../services/task.service';\nimport { getStorage, ref, getDownloadURL } from '@angular/fire/storage';\n\n@Component({\n  selector: 'app-worker-completetask',\n  standalone: true,\n  imports: [CommonModule, FormsModule, PdfViewerModule],\n  templateUrl: './worker-completetask.component.html',\n  styleUrl: './worker-completetask.component.scss'\n})\nexport class WorkerCompleteTaskComponent implements OnInit, OnDestroy {\n  // Inyección de servicios\n  private firestore: Firestore = inject(Firestore);\n  private auth: Auth = inject(Auth);\n  private router: Router = inject(Router);\n  private taskService: TaskService = inject(TaskService);\n  private sanitizer: DomSanitizer = inject(DomSanitizer);\n\n  // Estados del componente\n  completedTasks: Reporte[] = [];\n  currentUser: Usuario | null = null;\n  isLoading: boolean = true;\n  errorMessage: string = '';\n  successMessage: string = '';\n  \n  // Para el visor de PDF\n  showPdfViewer: boolean = false;\n  pdfUrl: SafeUrl | null = null;\n  selectedReport: Reporte | null = null;\n  \n  // Para almacenar suscripciones y liberarlas en el destroy\n  private subscriptions: Subscription[] = [];\n  \n  ngOnInit(): void {\n    this.setupAuthListener();\n  }\n  \n  ngOnDestroy(): void {\n    // Desuscribir para evitar memory leaks\n    this.subscriptions.forEach(sub => {\n      if (sub) sub.unsubscribe();\n    });\n    \n    // Liberar recursos URL\n    if (this.pdfUrl) {\n      this.revokeObjectURL(this.pdfUrl);\n    }\n  }\n  \n  // Revocar URL para liberar memoria\n  private revokeObjectURL(safeUrl: SafeUrl): void {\n    try {\n      const urlStr = safeUrl.toString();\n      const match = urlStr.match(/blob:http[^\"']+/);\n      if (match && match[0]) {\n        URL.revokeObjectURL(match[0]);\n      }\n    } catch (error) {\n      console.error('Error al revocar URL:', error);\n    }\n  }\n  \n  private setupAuthListener(): void {\n    const authSub = this.auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        console.log('Usuario autenticado:', user.email);\n        try {\n          await this.loadUserData(user.uid);\n        } catch (error) {\n          console.error('Error en la inicialización:', error);\n          this.errorMessage = 'Error al cargar los datos del usuario';\n        }\n      } else {\n        console.log('No hay usuario autenticado');\n        this.router.navigate(['/login']);\n      }\n    });\n    \n    if (authSub) {\n      this.subscriptions.push(new Subscription(() => authSub()));\n    }\n  }\n  \n  private async loadUserData(userId: string): Promise<void> {\n    try {\n      console.log('Cargando datos del usuario:', userId);\n      const userDoc = await getDoc(doc(this.firestore, 'Usuario', userId));\n      \n      if (userDoc.exists()) {\n        this.currentUser = {\n          ...userDoc.data() as Usuario,\n          IdUsuario: userId\n        };\n        \n        console.log('Datos de usuario cargados:', this.currentUser);\n        \n        if (this.currentUser.IdUsuario) {\n          this.loadCompletedReportes(this.currentUser.IdUsuario);\n        } else {\n          throw new Error('Usuario sin ID válido');\n        }\n      } else {\n        throw new Error('No se encontró el documento del usuario');\n      }\n    } catch (error) {\n      console.error('Error al cargar datos del usuario:', error);\n      this.errorMessage = 'Error al cargar los datos del usuario';\n      this.isLoading = false;\n    }\n  }\n  \n  // Cargar reportes completados\n  private loadCompletedReportes(userId: string): void {\n    this.isLoading = true;\n    this.errorMessage = '';\n    \n    // Usar el servicio de tareas para obtener reportes completados\n    const subscription = this.taskService.getCompletedReportesByWorker(userId).pipe(\n      tap(reportes => {\n        console.log('Reportes completados recibidos:', reportes);\n        this.completedTasks = reportes;\n        this.isLoading = false;\n      }),\n      catchError(error => {\n        console.error('Error al cargar reportes completados:', error);\n        this.errorMessage = 'Error al cargar los reportes completados';\n        this.isLoading = false;\n        return from([]);\n      })\n    ).subscribe();\n    \n    this.subscriptions.push(subscription);\n  }\n  \n  // Método para volver atrás\n  goBack(): void {\n    this.router.navigate(['/worker']);\n  }\n  \n  // Formatear fecha para mostrar\n  formatDate(date: any): string {\n    if (!date) return 'Fecha no disponible';\n    \n    try {\n      // Si es un timestamp de Firestore\n      if (date && typeof date === 'object' && 'seconds' in date) {\n        date = new Date(date.seconds * 1000);\n      }\n      // Si es una string o un objeto Date\n      const dateObj = date instanceof Date ? date : new Date(date);\n      \n      return dateObj.toLocaleDateString('es-ES', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    } catch (error) {\n      console.error('Error al formatear fecha:', error);\n      return 'Fecha inválida';\n    }\n  }\n  \n  // Determinar clase CSS según el estado\n  getStatusClass(status: string): string {\n    switch (status?.toLowerCase()) {\n      case 'completado':\n        return 'completed';\n      case 'pendiente':\n        return 'pending';\n      default:\n        return 'default';\n    }\n  }\n  \n  // Determinar clase CSS según la prioridad\n  getPriorityClass(priority: string): string {\n    switch (priority?.toLowerCase()) {\n      case 'alta':\n        return 'high';\n      case 'media':\n        return 'medium';\n      case 'baja':\n        return 'low';\n      default:\n        return 'default';\n    }\n  }\n  \n  // Abrir visor de PDF\n  openPdfViewer(report: Reporte, event: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    \n    this.isLoading = true;\n    this.selectedReport = report;\n    this.showPdfViewer = true;\n    \n    // Primero intentar obtener el PDF desde la URL almacenada\n    if (report.pdfUrl) {\n      try {\n        this.pdfUrl = this.sanitizer.bypassSecurityTrustResourceUrl(report.pdfUrl);\n        this.isLoading = false;\n      } catch (error) {\n        console.error('Error al cargar URL del PDF:', error);\n        this.loadPdfFromStorage(report);\n      }\n    } else {\n      // Si no hay URL directa, intentar cargar desde Storage\n      this.loadPdfFromStorage(report);\n    }\n  }\n  \n  // Cargar PDF desde Firebase Storage\n  private async loadPdfFromStorage(report: Reporte): Promise<void> {\n    if (!report.IdReporte) {\n      this.errorMessage = 'ID de reporte no disponible';\n      this.closePdfViewer();\n      return;\n    }\n    \n    try {\n      const storage = getStorage();\n      // Construir path al PDF basado en la estructura de carpetas\n      const pdfPath = `reportes_pdf/${report.IdReporte}.pdf`;\n      const pdfRef = ref(storage, pdfPath);\n      \n      // Obtener URL de descarga\n      const downloadURL = await getDownloadURL(pdfRef);\n      this.pdfUrl = this.sanitizer.bypassSecurityTrustResourceUrl(downloadURL);\n      \n      // Si no tenemos la URL almacenada, actualizar el documento\n      if (!report.pdfUrl) {\n        try {\n          await this.taskService.updateReporteWithPdfInfo(report.IdReporte, downloadURL);\n          console.log('URL de PDF actualizada en el reporte');\n        } catch (updateError) {\n          console.error('Error al actualizar URL de PDF en el reporte:', updateError);\n        }\n      }\n    } catch (error) {\n      console.error('Error al cargar PDF desde Storage:', error);\n      this.errorMessage = 'No se pudo cargar el PDF. El archivo podría no existir.';\n      setTimeout(() => this.errorMessage = '', 5000);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  \n  // Cerrar visor de PDF\n  closePdfViewer(): void {\n    if (this.pdfUrl) {\n      this.revokeObjectURL(this.pdfUrl);\n      this.pdfUrl = null;\n    }\n    this.showPdfViewer = false;\n    this.selectedReport = null;\n  }\n  \n  // Iniciar descarga de PDF\n  async startDownload(report: Reporte, event: Event): Promise<void> {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    \n    if (!report.IdReporte) {\n      this.errorMessage = 'ID de reporte no disponible';\n      return;\n    }\n    \n    try {\n      this.isLoading = true;\n      const storage = getStorage();\n      const pdfPath = `reportes_pdf/${report.IdReporte}.pdf`;\n      const pdfRef = ref(storage, pdfPath);\n      \n      // Obtener URL de descarga\n      const downloadURL = await getDownloadURL(pdfRef);\n      \n      // Crear elemento a para descarga\n      const downloadLink = document.createElement('a');\n      downloadLink.href = downloadURL;\n      downloadLink.download = `Reporte_${report.Tipo_Trabajo.replace(/\\s+/g, '_')}.pdf`;\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n      \n      this.successMessage = 'Descarga iniciada correctamente';\n      setTimeout(() => this.successMessage = '', 3000);\n    } catch (error) {\n      console.error('Error al descargar PDF:', error);\n      this.errorMessage = 'Error al descargar el PDF';\n      setTimeout(() => this.errorMessage = '', 5000);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}", "<div class=\"tasks-container\">\n  <button type=\"button\" class=\"btn-back\" (click)=\"goBack()\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n      <line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\"></line>\n      <polyline points=\"12 19 5 12 12 5\"></polyline>\n    </svg>\n    Atrás\n  </button>\n  \n  <h2>Reportes Completados</h2>\n  \n  <!-- Mensajes de estado -->\n  @if (errorMessage) {\n    <div class=\"alert alert-error\">\n      <svg class=\"alert-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\n        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n      </svg>\n      {{ errorMessage }}\n    </div>\n  }\n  \n  @if (successMessage) {\n    <div class=\"alert alert-success\">\n      <svg class=\"alert-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n      </svg>\n      {{ successMessage }}\n    </div>\n  }\n  \n  <!-- Estado de carga -->\n  @if (isLoading) {\n    <div class=\"loading-state\">\n      <div class=\"spinner\"></div>\n      <p>Cargando reportes completados...</p>\n    </div>\n  }\n  \n  <!-- Sin reportes -->\n  @if (!isLoading && completedTasks.length === 0) {\n    <div class=\"no-tasks\">\n      <div class=\"empty-state\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path>\n          <line x1=\"12\" y1=\"11\" x2=\"12\" y2=\"17\"></line>\n          <line x1=\"9\" y1=\"14\" x2=\"15\" y2=\"14\"></line>\n        </svg>\n        <p>No hay reportes completados.</p>\n      </div>\n    </div>\n  }\n  \n  <!-- Lista de reportes completados -->\n  @if (!isLoading && completedTasks.length > 0) {\n    <div class=\"tasks-grid\">\n      @for (task of completedTasks; track task.IdReporte) {\n        <div class=\"task-card\">\n          <div class=\"task-header\">\n            <h3>{{task.Tipo_Trabajo}}</h3>\n            <span class=\"task-date\">Completado: {{formatDate(task.fechaCompletado || task.fecha)}}</span>\n          </div>\n          \n          <div class=\"task-content\">\n            <!-- Información principal -->\n            <div class=\"task-info\">\n              <p class=\"task-description\">\n                <strong>Descripción:</strong> {{task.jobDescription}}\n              </p>\n              \n              @if (task.location) {\n                <p class=\"task-location\">\n                  <strong>Ubicación:</strong> {{task.location}}\n                </p>\n              }\n              \n              <!-- Etiquetas de estado y prioridad -->\n              <div class=\"task-tags\">\n                <span class=\"status-badge\" [class]=\"getStatusClass(task.estado)\">\n                  {{task.estado}}\n                </span>\n                \n                @if (task.priority) {\n                  <span class=\"priority-badge\" [class]=\"getPriorityClass(task.priority)\">\n                    {{task.priority}}\n                  </span>\n                }\n                \n                <!-- Badge para disponibilidad de PDF con tooltip -->\n                @if (task.pdfUrl || task.reporteGenerado) {\n                  <span class=\"pdf-badge\" title=\"PDF disponible\" (click)=\"openPdfViewer(task, $event)\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                      <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                      <polyline points=\"14 2 14 8 20 8\"></polyline>\n                      <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                      <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                      <polyline points=\"10 9 9 9 8 9\"></polyline>\n                    </svg>\n                    PDF\n                  </span>\n                }\n                \n                <!-- Badge para evidencias fotográficas -->\n                @if (task.evidenceImages && task.evidenceImages.length > 0) {\n                  <span class=\"evidence-badge\" title=\"Contiene evidencias fotográficas\" (click)=\"openPdfViewer(task, $event)\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                      <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                      <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"></circle>\n                      <polyline points=\"21 15 16 10 5 21\"></polyline>\n                    </svg>\n                    Fotos ({{task.evidenceImages.length}})\n                  </span>\n                }\n              </div>\n              \n              @if (task.departamento) {\n                <p class=\"task-department\">\n                  <strong>Departamento:</strong> {{task.departamento}}\n                </p>\n              }\n            </div>\n            \n            <!-- Descripción de completación -->\n            @if (task.descripcionCompletado) {\n              <div class=\"completion-description\">\n                <strong>Descripción del trabajo:</strong>\n                <p>{{task.descripcionCompletado}}</p>\n              </div>\n            }\n            \n            <!-- Materiales utilizados -->\n            @if (task.materialesUtilizados) {\n              <div class=\"materials-description\">\n                <strong>Materiales utilizados:</strong>\n                <p>{{task.materialesUtilizados}}</p>\n              </div>\n            }\n            \n            <!-- Botones para ver y descargar PDF -->\n            <div class=\"task-actions\">\n              <button type=\"button\" class=\"btn-view-pdf\" (click)=\"openPdfViewer(task, $event)\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\n                  <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n                </svg>\n                Ver PDF\n              </button>\n              \n              <button type=\"button\" class=\"btn-download-pdf\" (click)=\"startDownload(task, $event)\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\n                  <polyline points=\"7 10 12 15 17 10\"></polyline>\n                  <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\n                </svg>\n                Descargar PDF\n              </button>\n            </div>\n          </div>\n        </div>\n      }\n    </div>\n  }\n  \n  <!-- Modal para visor de PDF mejorado -->\n  @if (showPdfViewer) {\n    <div class=\"pdf-modal-overlay\">\n      <div class=\"pdf-modal\">\n        <div class=\"modal-header\">\n          <h3>{{ selectedReport?.Tipo_Trabajo }}</h3>\n          <button type=\"button\" class=\"btn-close\" (click)=\"closePdfViewer()\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"modal-body\">\n          @if (pdfUrl) {\n            <iframe [src]=\"pdfUrl\" width=\"100%\" height=\"100%\" frameborder=\"0\"></iframe>\n          }\n          \n          @if (!pdfUrl) {\n            <div class=\"pdf-loading\">\n              <div class=\"spinner\"></div>\n              <p>Cargando PDF...</p>\n            </div>\n          }\n        </div>\n        \n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn-cancel\" (click)=\"closePdfViewer()\">Cerrar</button>\n          <button type=\"button\" class=\"btn-download\" (click)=\"startDownload(selectedReport, $event)\">Descargar PDF</button>\n        </div>\n      </div>\n    </div>\n  }\n</div>"],
  "mappings": "qrBCaIA,EAAA,EAAA,MAAA,CAAA,MACEA,EAAA,EAAA,MAAA,EAAA,EACEC,EAAA,EAAA,SAAA,EAAA,EAAwC,EAAA,OAAA,EAAA,EACI,EAAA,OAAA,EAAA,EAE9CC,EAAA,EACAC,EAAA,CAAA,EACFD,EAAA,kBADEE,EAAA,CAAA,EAAAC,EAAA,IAAAC,EAAAC,aAAA,GAAA,6BAKFP,EAAA,EAAA,MAAA,CAAA,MACEA,EAAA,EAAA,MAAA,EAAA,EACEC,EAAA,EAAA,OAAA,EAAA,EAAoD,EAAA,WAAA,EAAA,EAEtDC,EAAA,EACAC,EAAA,CAAA,EACFD,EAAA,kBADEE,EAAA,CAAA,EAAAC,EAAA,IAAAC,EAAAE,eAAA,GAAA,0BAMFR,EAAA,EAAA,MAAA,CAAA,EACEC,EAAA,EAAA,MAAA,EAAA,EACAD,EAAA,EAAA,GAAA,EAAGG,EAAA,EAAA,kCAAA,EAAgCD,EAAA,EAAI,0BAMzCF,EAAA,EAAA,MAAA,CAAA,EAAsB,EAAA,MAAA,EAAA,MAElBA,EAAA,EAAA,MAAA,EAAA,EACEC,EAAA,EAAA,OAAA,EAAA,EAA6F,EAAA,OAAA,EAAA,EAChD,EAAA,OAAA,EAAA,EAE/CC,EAAA,MACAF,EAAA,EAAA,GAAA,EAAGG,EAAA,EAAA,8BAAA,EAA4BD,EAAA,EAAI,EAC/B,6BAsBIF,EAAA,EAAA,IAAA,EAAA,EAAyB,EAAA,QAAA,EACfG,EAAA,EAAA,eAAA,EAAUD,EAAA,EAAUC,EAAA,CAAA,EAC9BD,EAAA,4BAD8BE,EAAA,CAAA,EAAAC,EAAA,IAAAI,EAAAC,SAAA,GAAA,6BAW5BV,EAAA,EAAA,OAAA,EAAA,EACEG,EAAA,CAAA,EACFD,EAAA,mCAF6BS,EAAAL,EAAAM,iBAAAH,EAAAI,QAAA,CAAA,EAC3BT,EAAA,EAAAC,EAAA,IAAAI,EAAAI,SAAA,GAAA,sCAMFb,EAAA,EAAA,OAAA,EAAA,EAA+Cc,EAAA,QAAA,SAAAC,EAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAR,EAAAS,EAAA,EAAAC,UAAAb,EAAAY,EAAA,CAAA,EAAA,OAAAE,EAASd,EAAAe,cAAAZ,EAAAM,CAAA,CAA2B,CAAA,CAAA,MACjFf,EAAA,EAAA,MAAA,EAAA,EACEC,EAAA,EAAA,OAAA,EAAA,EAA4E,EAAA,WAAA,EAAA,EAC/B,EAAA,OAAA,EAAA,EACD,EAAA,OAAA,EAAA,EACA,EAAA,WAAA,EAAA,EAE9CC,EAAA,EACAC,EAAA,EAAA,OAAA,EACFD,EAAA,sCAKAF,EAAA,EAAA,OAAA,EAAA,EAAsEc,EAAA,QAAA,SAAAC,EAAA,CAAAC,EAAAM,CAAA,EAAA,IAAAb,EAAAS,EAAA,EAAAC,UAAAb,EAAAY,EAAA,CAAA,EAAA,OAAAE,EAASd,EAAAe,cAAAZ,EAAAM,CAAA,CAA2B,CAAA,CAAA,MACxGf,EAAA,EAAA,MAAA,EAAA,EACEC,EAAA,EAAA,OAAA,EAAA,EAA8D,EAAA,SAAA,EAAA,EACnB,EAAA,WAAA,EAAA,EAE7CC,EAAA,EACAC,EAAA,CAAA,EACFD,EAAA,8BADEE,EAAA,CAAA,EAAAC,EAAA,WAAAI,EAAAc,eAAAC,OAAA,IAAA,6BAMJxB,EAAA,EAAA,IAAA,EAAA,EAA2B,EAAA,QAAA,EACjBG,EAAA,EAAA,eAAA,EAAaD,EAAA,EAAUC,EAAA,CAAA,EACjCD,EAAA,4BADiCE,EAAA,CAAA,EAAAC,EAAA,IAAAI,EAAAgB,aAAA,GAAA,6BAOnCzB,EAAA,EAAA,MAAA,EAAA,EAAoC,EAAA,QAAA,EAC1BG,EAAA,EAAA,6BAAA,EAAwBD,EAAA,EAChCF,EAAA,EAAA,GAAA,EAAGG,EAAA,CAAA,EAA8BD,EAAA,EAAI,4BAAlCE,EAAA,CAAA,EAAAsB,EAAAjB,EAAAkB,qBAAA,6BAML3B,EAAA,EAAA,MAAA,EAAA,EAAmC,EAAA,QAAA,EACzBG,EAAA,EAAA,wBAAA,EAAsBD,EAAA,EAC9BF,EAAA,EAAA,GAAA,EAAGG,EAAA,CAAA,EAA6BD,EAAA,EAAI,4BAAjCE,EAAA,CAAA,EAAAsB,EAAAjB,EAAAmB,oBAAA,sCA7EX5B,EAAA,EAAA,MAAA,EAAA,EAAuB,EAAA,MAAA,EAAA,EACI,EAAA,IAAA,EACnBG,EAAA,CAAA,EAAqBD,EAAA,EACzBF,EAAA,EAAA,OAAA,EAAA,EAAwBG,EAAA,CAAA,EAA8DD,EAAA,EAAO,EAG/FF,EAAA,EAAA,MAAA,EAAA,EAA0B,EAAA,MAAA,EAAA,EAED,EAAA,IAAA,EAAA,EACO,EAAA,QAAA,EAClBG,EAAA,GAAA,iBAAA,EAAYD,EAAA,EAAUC,EAAA,EAAA,EAChCD,EAAA,EAEA2B,EAAA,GAAAC,GAAA,EAAA,EAAA,IAAA,EAAA,EAOA9B,EAAA,GAAA,MAAA,EAAA,EAAuB,GAAA,OAAA,EAAA,EAEnBG,EAAA,EAAA,EACFD,EAAA,EAEA2B,EAAA,GAAAE,GAAA,EAAA,EAAA,OAAA,EAAA,EAAqB,GAAAC,GAAA,EAAA,EAAA,OAAA,EAAA,EAOsB,GAAAC,GAAA,EAAA,EAAA,OAAA,EAAA,EAwB7C/B,EAAA,EAEA2B,EAAA,GAAAK,GAAA,EAAA,EAAA,IAAA,EAAA,EAKFhC,EAAA,EAGA2B,EAAA,GAAAM,GAAA,EAAA,EAAA,MAAA,EAAA,EAAkC,GAAAC,GAAA,EAAA,EAAA,MAAA,EAAA,EAgBlCpC,EAAA,GAAA,MAAA,EAAA,EAA0B,GAAA,SAAA,EAAA,EACmBc,EAAA,QAAA,SAAAC,EAAA,CAAA,IAAAN,EAAAO,EAAAqB,CAAA,EAAAlB,UAAAb,EAAAY,EAAA,CAAA,EAAA,OAAAE,EAASd,EAAAe,cAAAZ,EAAAM,CAAA,CAA2B,CAAA,CAAA,MAC7Ef,EAAA,GAAA,MAAA,EAAA,EACEC,EAAA,GAAA,OAAA,EAAA,EAA8D,GAAA,SAAA,EAAA,EAEhEC,EAAA,EACAC,EAAA,GAAA,WAAA,EACFD,EAAA,MAEAF,EAAA,GAAA,SAAA,EAAA,EAA+Cc,EAAA,QAAA,SAAAC,EAAA,CAAA,IAAAN,EAAAO,EAAAqB,CAAA,EAAAlB,UAAAb,EAAAY,EAAA,CAAA,EAAA,OAAAE,EAASd,EAAAgC,cAAA7B,EAAAM,CAAA,CAA2B,CAAA,CAAA,MACjFf,EAAA,GAAA,MAAA,EAAA,EACEC,EAAA,GAAA,OAAA,EAAA,EAA2D,GAAA,WAAA,EAAA,EACZ,GAAA,OAAA,EAAA,EAEjDC,EAAA,EACAC,EAAA,GAAA,iBAAA,EACFD,EAAA,EAAS,EACL,EACF,mCAlGAE,EAAA,CAAA,EAAAsB,EAAAjB,EAAA8B,YAAA,EACoBnC,EAAA,CAAA,EAAAC,EAAA,eAAAC,EAAAkC,WAAA/B,EAAAgC,iBAAAhC,EAAAiC,KAAA,EAAA,EAAA,EAOUtC,EAAA,CAAA,EAAAC,EAAA,IAAAI,EAAAkC,eAAA,GAAA,EAGhCvC,EAAA,EAAAwC,EAAAnC,EAAAC,SAAA,GAAA,EAAA,EAQ6BN,EAAA,CAAA,EAAAO,EAAAL,EAAAuC,eAAApC,EAAAqC,MAAA,CAAA,EACzB1C,EAAA,EAAAC,EAAA,IAAAI,EAAAqC,OAAA,GAAA,EAGF1C,EAAA,EAAAwC,EAAAnC,EAAAI,SAAA,GAAA,EAAA,EAOAT,EAAA,EAAAwC,EAAAnC,EAAAsC,QAAAtC,EAAAuC,gBAAA,GAAA,EAAA,EAcA5C,EAAA,EAAAwC,EAAAnC,EAAAc,gBAAAd,EAAAc,eAAAC,OAAA,EAAA,GAAA,EAAA,EAYFpB,EAAA,EAAAwC,EAAAnC,EAAAgB,aAAA,GAAA,EAAA,EAQFrB,EAAA,EAAAwC,EAAAnC,EAAAkB,sBAAA,GAAA,EAAA,EAQAvB,EAAA,EAAAwC,EAAAnC,EAAAmB,qBAAA,GAAA,EAAA,6BA5ER5B,EAAA,EAAA,MAAA,CAAA,EACEiD,EAAA,EAAAC,GAAA,GAAA,GAAA,MAAA,GAAAC,CAAA,EAwGFjD,EAAA,kBAxGEE,EAAA,EAAAgD,EAAA9C,EAAA+C,cAAA,4BA2HMpD,EAAA,EAAA,SAAA,EAAA,kBAAQqD,EAAA,MAAAhD,EAAAyC,OAAAQ,CAAA,0BAIRvD,EAAA,EAAA,MAAA,EAAA,EACEC,EAAA,EAAA,MAAA,EAAA,EACAD,EAAA,EAAA,GAAA,EAAGG,EAAA,EAAA,iBAAA,EAAeD,EAAA,EAAI,sCApBhCF,EAAA,EAAA,MAAA,EAAA,EAA+B,EAAA,MAAA,EAAA,EACN,EAAA,MAAA,EAAA,EACK,EAAA,IAAA,EACpBG,EAAA,CAAA,EAAkCD,EAAA,EACtCF,EAAA,EAAA,SAAA,EAAA,EAAwCc,EAAA,QAAA,UAAA,CAAAE,EAAAwC,CAAA,EAAA,IAAAlD,EAAAY,EAAA,EAAA,OAAAE,EAASd,EAAAmD,eAAA,CAAgB,CAAA,CAAA,MAC/DzD,EAAA,EAAA,MAAA,CAAA,EACEC,EAAA,EAAA,OAAA,EAAA,EAA2C,EAAA,OAAA,EAAA,EAE7CC,EAAA,EAAM,EACC,MAGXF,EAAA,EAAA,MAAA,EAAA,EACE6B,EAAA,GAAA6B,GAAA,EAAA,EAAA,SAAA,EAAA,EAAc,GAAAC,GAAA,EAAA,EAAA,MAAA,EAAA,EAUhBzD,EAAA,EAEAF,EAAA,GAAA,MAAA,EAAA,EAA0B,GAAA,SAAA,EAAA,EACiBc,EAAA,QAAA,UAAA,CAAAE,EAAAwC,CAAA,EAAA,IAAAlD,EAAAY,EAAA,EAAA,OAAAE,EAASd,EAAAmD,eAAA,CAAgB,CAAA,CAAA,EAAEtD,EAAA,GAAA,QAAA,EAAMD,EAAA,EAC1EF,EAAA,GAAA,SAAA,EAAA,EAA2Cc,EAAA,QAAA,SAAAC,EAAA,CAAAC,EAAAwC,CAAA,EAAA,IAAAlD,EAAAY,EAAA,EAAA,OAAAE,EAASd,EAAAgC,cAAAhC,EAAAsD,eAAA7C,CAAA,CAAqC,CAAA,CAAA,EAAEZ,EAAA,GAAA,eAAA,EAAaD,EAAA,EAAS,EAC7G,EACF,oBA1BEE,EAAA,CAAA,EAAAsB,EAAApB,EAAAsD,gBAAA,KAAA,KAAAtD,EAAAsD,eAAArB,YAAA,EAUJnC,EAAA,CAAA,EAAAwC,EAAAtC,EAAAyC,OAAA,GAAA,EAAA,EAIA3C,EAAA,EAAAwC,EAAAtC,EAAAyC,OAAA,GAAA,EAAA,GD1JV,IAAac,IAA2B,IAAA,CAAlC,MAAOA,CAA2B,CAE9BC,UAAuBC,EAAOC,CAAS,EACvCC,KAAaF,EAAOG,CAAI,EACxBC,OAAiBJ,EAAOK,CAAM,EAC9BC,YAA2BN,EAAOO,CAAW,EAC7CC,UAA0BR,EAAOS,CAAY,EAGrDnB,eAA4B,CAAA,EAC5BoB,YAA8B,KAC9BC,UAAqB,GACrBnE,aAAuB,GACvBC,eAAyB,GAGzBmE,cAAyB,GACzB5B,OAAyB,KACzBa,eAAiC,KAGzBgB,cAAgC,CAAA,EAExCC,UAAQ,CACN,KAAKC,kBAAiB,CACxB,CAEAC,aAAW,CAET,KAAKH,cAAcI,QAAQC,GAAM,CAC3BA,GAAKA,EAAIC,YAAW,CAC1B,CAAC,EAGG,KAAKnC,QACP,KAAKoC,gBAAgB,KAAKpC,MAAM,CAEpC,CAGQoC,gBAAgBC,EAAgB,CACtC,GAAI,CAEF,IAAMC,EADSD,EAAQE,SAAQ,EACVD,MAAM,iBAAiB,EACxCA,GAASA,EAAM,CAAC,GAClBE,IAAIJ,gBAAgBE,EAAM,CAAC,CAAC,CAEhC,OAASG,EAAO,CACdC,QAAQD,MAAM,wBAAyBA,CAAK,CAC9C,CACF,CAEQV,mBAAiB,CACvB,IAAMY,EAAU,KAAKzB,KAAK0B,mBAA0BC,GAAQC,EAAA,sBAC1D,GAAID,EAAM,CACRH,QAAQK,IAAI,uBAAwBF,EAAKG,KAAK,EAC9C,GAAI,CACF,MAAM,KAAKC,aAAaJ,EAAKK,GAAG,CAClC,OAAST,EAAO,CACdC,QAAQD,MAAM,iCAA+BA,CAAK,EAClD,KAAKjF,aAAe,uCACtB,CACF,MACEkF,QAAQK,IAAI,4BAA4B,EACxC,KAAK3B,OAAO+B,SAAS,CAAC,QAAQ,CAAC,CAEnC,EAAC,EAEGR,GACF,KAAKd,cAAcuB,KAAK,IAAIC,EAAa,IAAMV,EAAO,CAAE,CAAC,CAE7D,CAEcM,aAAaK,EAAc,QAAAR,EAAA,sBACvC,GAAI,CACFJ,QAAQK,IAAI,8BAA+BO,CAAM,EACjD,IAAMC,EAAU,MAAMC,EAAOC,EAAI,KAAK1C,UAAW,UAAWuC,CAAM,CAAC,EAEnE,GAAIC,EAAQG,OAAM,EAQhB,GAPA,KAAKhC,YAAciC,EAAAC,EAAA,GACdL,EAAQM,KAAI,GADE,CAEjBC,UAAWR,IAGbZ,QAAQK,IAAI,6BAA8B,KAAKrB,WAAW,EAEtD,KAAKA,YAAYoC,UACnB,KAAKC,sBAAsB,KAAKrC,YAAYoC,SAAS,MAErD,OAAM,IAAIE,MAAM,0BAAuB,MAGzC,OAAM,IAAIA,MAAM,4CAAyC,CAE7D,OAASvB,EAAO,CACdC,QAAQD,MAAM,qCAAsCA,CAAK,EACzD,KAAKjF,aAAe,wCACpB,KAAKmE,UAAY,EACnB,CACF,GAGQoC,sBAAsBT,EAAc,CAC1C,KAAK3B,UAAY,GACjB,KAAKnE,aAAe,GAGpB,IAAMyG,EAAe,KAAK3C,YAAY4C,6BAA6BZ,CAAM,EAAEa,KACzEC,EAAIC,GAAW,CACb3B,QAAQK,IAAI,kCAAmCsB,CAAQ,EACvD,KAAK/D,eAAiB+D,EACtB,KAAK1C,UAAY,EACnB,CAAC,EACD2C,EAAW7B,IACTC,QAAQD,MAAM,wCAAyCA,CAAK,EAC5D,KAAKjF,aAAe,2CACpB,KAAKmE,UAAY,GACV4C,EAAK,CAAA,CAAE,EACf,CAAC,EACFC,UAAS,EAEX,KAAK3C,cAAcuB,KAAKa,CAAY,CACtC,CAGAQ,QAAM,CACJ,KAAKrD,OAAO+B,SAAS,CAAC,SAAS,CAAC,CAClC,CAGA1D,WAAWiF,EAAS,CAClB,GAAI,CAACA,EAAM,MAAO,sBAElB,GAAI,CAEF,OAAIA,GAAQ,OAAOA,GAAS,UAAY,YAAaA,IACnDA,EAAO,IAAIC,KAAKD,EAAKE,QAAU,GAAI,IAGrBF,aAAgBC,KAAOD,EAAO,IAAIC,KAAKD,CAAI,GAE5CG,mBAAmB,QAAS,CACzCC,KAAM,UACNC,MAAO,OACPC,IAAK,UACN,CACH,OAASvC,EAAO,CACdC,eAAQD,MAAM,4BAA6BA,CAAK,EACzC,mBACT,CACF,CAGA3C,eAAemF,EAAc,CAC3B,OAAQA,GAAQC,YAAW,EAAE,CAC3B,IAAK,aACH,MAAO,YACT,IAAK,YACH,MAAO,UACT,QACE,MAAO,SACX,CACF,CAGArH,iBAAiBC,EAAgB,CAC/B,OAAQA,GAAUoH,YAAW,EAAE,CAC7B,IAAK,OACH,MAAO,OACT,IAAK,QACH,MAAO,SACT,IAAK,OACH,MAAO,MACT,QACE,MAAO,SACX,CACF,CAGA5G,cAAc6G,EAAiBC,EAAY,CAWzC,GAVIA,IACFA,EAAMC,eAAc,EACpBD,EAAME,gBAAe,GAGvB,KAAK3D,UAAY,GACjB,KAAKd,eAAiBsE,EACtB,KAAKvD,cAAgB,GAGjBuD,EAAOnF,OACT,GAAI,CACF,KAAKA,OAAS,KAAKwB,UAAU+D,+BAA+BJ,EAAOnF,MAAM,EACzE,KAAK2B,UAAY,EACnB,OAASc,EAAO,CACdC,QAAQD,MAAM,+BAAgCA,CAAK,EACnD,KAAK+C,mBAAmBL,CAAM,CAChC,MAGA,KAAKK,mBAAmBL,CAAM,CAElC,CAGcK,mBAAmBL,EAAe,QAAArC,EAAA,sBAC9C,GAAI,CAACqC,EAAOM,UAAW,CACrB,KAAKjI,aAAe,8BACpB,KAAKkD,eAAc,EACnB,MACF,CAEA,GAAI,CACF,IAAMgF,EAAUC,EAAU,EAEpBC,EAAU,gBAAgBT,EAAOM,SAAS,OAC1CI,EAASC,EAAIJ,EAASE,CAAO,EAG7BG,EAAc,MAAMC,EAAeH,CAAM,EAI/C,GAHA,KAAK7F,OAAS,KAAKwB,UAAU+D,+BAA+BQ,CAAW,EAGnE,CAACZ,EAAOnF,OACV,GAAI,CACF,MAAM,KAAKsB,YAAY2E,yBAAyBd,EAAOM,UAAWM,CAAW,EAC7ErD,QAAQK,IAAI,sCAAsC,CACpD,OAASmD,EAAa,CACpBxD,QAAQD,MAAM,gDAAiDyD,CAAW,CAC5E,CAEJ,OAASzD,EAAO,CACdC,QAAQD,MAAM,qCAAsCA,CAAK,EACzD,KAAKjF,aAAe,6DACpB2I,WAAW,IAAM,KAAK3I,aAAe,GAAI,GAAI,CAC/C,QAAC,CACC,KAAKmE,UAAY,EACnB,CACF,GAGAjB,gBAAc,CACR,KAAKV,SACP,KAAKoC,gBAAgB,KAAKpC,MAAM,EAChC,KAAKA,OAAS,MAEhB,KAAK4B,cAAgB,GACrB,KAAKf,eAAiB,IACxB,CAGMtB,cAAc4F,EAAiBC,EAAY,QAAAtC,EAAA,sBAM/C,GALIsC,IACFA,EAAMC,eAAc,EACpBD,EAAME,gBAAe,GAGnB,CAACH,EAAOM,UAAW,CACrB,KAAKjI,aAAe,8BACpB,MACF,CAEA,GAAI,CACF,KAAKmE,UAAY,GACjB,IAAM+D,EAAUC,EAAU,EACpBC,EAAU,gBAAgBT,EAAOM,SAAS,OAC1CI,EAASC,EAAIJ,EAASE,CAAO,EAG7BG,EAAc,MAAMC,EAAeH,CAAM,EAGzCO,EAAeC,SAASC,cAAc,GAAG,EAC/CF,EAAaG,KAAOR,EACpBK,EAAaI,SAAW,WAAWrB,EAAO3F,aAAaiH,QAAQ,OAAQ,GAAG,CAAC,OAC3EJ,SAASK,KAAKC,YAAYP,CAAY,EACtCA,EAAaQ,MAAK,EAClBP,SAASK,KAAKG,YAAYT,CAAY,EAEtC,KAAK3I,eAAiB,kCACtB0I,WAAW,IAAM,KAAK1I,eAAiB,GAAI,GAAI,CACjD,OAASgF,EAAO,CACdC,QAAQD,MAAM,0BAA2BA,CAAK,EAC9C,KAAKjF,aAAe,4BACpB2I,WAAW,IAAM,KAAK3I,aAAe,GAAI,GAAI,CAC/C,QAAC,CACC,KAAKmE,UAAY,EACnB,CACF,8CAhSWb,EAA2B,2BAA3BA,EAA2BgG,UAAA,CAAA,CAAA,yBAAA,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,iBAAA,EAAA,CAAA,OAAA,SAAA,EAAA,WAAA,EAAA,OAAA,EAAA,CAAA,QAAA,6BAAA,QAAA,KAAA,SAAA,KAAA,UAAA,YAAA,OAAA,OAAA,SAAA,eAAA,eAAA,IAAA,iBAAA,QAAA,kBAAA,OAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,EAAA,CAAA,SAAA,iBAAA,EAAA,CAAA,EAAA,QAAA,aAAA,EAAA,CAAA,EAAA,QAAA,eAAA,EAAA,CAAA,EAAA,eAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,mBAAA,EAAA,CAAA,QAAA,6BAAA,QAAA,KAAA,SAAA,KAAA,UAAA,YAAA,OAAA,OAAA,SAAA,eAAA,eAAA,IAAA,iBAAA,QAAA,kBAAA,QAAA,EAAA,YAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,IAAA,IAAA,EAAA,CAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,QAAA,KAAA,IAAA,EAAA,CAAA,IAAA,oCAAA,EAAA,CAAA,SAAA,uBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,QAAA,6BAAA,QAAA,KAAA,SAAA,KAAA,UAAA,YAAA,OAAA,OAAA,SAAA,eAAA,eAAA,IAAA,iBAAA,QAAA,kBAAA,OAAA,EAAA,CAAA,IAAA,6EAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,EAAA,CAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,eAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,CAAA,QAAA,iBAAA,EAAA,WAAA,EAAA,CAAA,QAAA,sCAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,wBAAA,EAAA,CAAA,EAAA,uBAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,OAAA,SAAA,EAAA,eAAA,EAAA,OAAA,EAAA,CAAA,QAAA,6BAAA,QAAA,KAAA,SAAA,KAAA,UAAA,YAAA,OAAA,OAAA,SAAA,eAAA,eAAA,IAAA,iBAAA,QAAA,kBAAA,OAAA,EAAA,CAAA,IAAA,8CAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,IAAA,GAAA,EAAA,CAAA,OAAA,SAAA,EAAA,mBAAA,EAAA,OAAA,EAAA,CAAA,IAAA,2CAAA,EAAA,CAAA,SAAA,kBAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,GAAA,EAAA,CAAA,EAAA,gBAAA,EAAA,CAAA,QAAA,iBAAA,EAAA,YAAA,EAAA,OAAA,EAAA,CAAA,QAAA,6BAAA,QAAA,KAAA,SAAA,KAAA,UAAA,YAAA,OAAA,OAAA,SAAA,eAAA,eAAA,IAAA,iBAAA,QAAA,kBAAA,OAAA,EAAA,CAAA,IAAA,4DAAA,EAAA,CAAA,SAAA,gBAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,EAAA,CAAA,SAAA,cAAA,EAAA,CAAA,QAAA,sCAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,CAAA,IAAA,IAAA,IAAA,IAAA,QAAA,KAAA,SAAA,KAAA,KAAA,IAAA,KAAA,GAAA,EAAA,CAAA,KAAA,MAAA,KAAA,MAAA,IAAA,KAAA,EAAA,CAAA,SAAA,kBAAA,EAAA,CAAA,EAAA,WAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,OAAA,SAAA,EAAA,YAAA,EAAA,OAAA,EAAA,CAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,KAAA,IAAA,EAAA,CAAA,KAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,EAAA,CAAA,EAAA,YAAA,EAAA,CAAA,QAAA,OAAA,SAAA,OAAA,cAAA,IAAA,EAAA,KAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA,OAAA,SAAA,EAAA,aAAA,EAAA,OAAA,EAAA,CAAA,OAAA,SAAA,EAAA,eAAA,EAAA,OAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,CAAAD,EAAA,IC9BxClK,EAAA,EAAA,MAAA,CAAA,EAA6B,EAAA,SAAA,CAAA,EACYc,EAAA,QAAA,UAAA,CAAA,OAASqJ,EAAA3C,OAAA,CAAQ,CAAA,MACtDxH,EAAA,EAAA,MAAA,CAAA,EACEC,EAAA,EAAA,OAAA,CAAA,EAA4C,EAAA,WAAA,CAAA,EAE9CC,EAAA,EACAC,EAAA,EAAA,YAAA,EACFD,EAAA,MAEAF,EAAA,EAAA,IAAA,EAAIG,EAAA,EAAA,sBAAA,EAAoBD,EAAA,EAGxB2B,EAAA,EAAAuI,EAAA,EAAA,EAAA,MAAA,CAAA,EAAoB,EAAAC,GAAA,EAAA,EAAA,MAAA,CAAA,EAWE,GAAAC,GAAA,EAAA,EAAA,MAAA,CAAA,EAWL,GAAAC,GAAA,EAAA,EAAA,MAAA,CAAA,EAQgC,GAAAC,GAAA,EAAA,EAAA,MAAA,CAAA,EAcF,GAAAC,GAAA,GAAA,EAAA,MAAA,EAAA,EA+IjDvK,EAAA,SA3LEE,EAAA,CAAA,EAAAwC,EAAAuH,EAAA5J,aAAA,EAAA,EAAA,EAWAH,EAAA,EAAAwC,EAAAuH,EAAA3J,eAAA,EAAA,EAAA,EAWAJ,EAAA,EAAAwC,EAAAuH,EAAAzF,UAAA,GAAA,EAAA,EAQAtE,EAAA,EAAAwC,EAAA,CAAAuH,EAAAzF,WAAAyF,EAAA9G,eAAA7B,SAAA,EAAA,GAAA,EAAA,EAcApB,EAAA,EAAAwC,EAAA,CAAAuH,EAAAzF,WAAAyF,EAAA9G,eAAA7B,OAAA,EAAA,GAAA,EAAA,EA8GApB,EAAA,EAAAwC,EAAAuH,EAAAxF,cAAA,GAAA,EAAA,kBD5IU+F,EAAcC,EAAaC,CAAe,EAAAC,OAAA,CAAA;uEAAA,CAAA,CAAA,SAIzChH,CAA2B,GAAA",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r0", "errorMessage", "successMessage", "task_r3", "location", "\u0275\u0275classMap", "getPriorityClass", "priority", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "$implicit", "\u0275\u0275resetView", "openPdfViewer", "_r5", "evidenceImages", "length", "departamento", "\u0275\u0275textInterpolate", "descripcionCompletado", "materialesUtilizados", "\u0275\u0275template", "WorkerCompleteTaskComponent_Conditional_12_For_2_Conditional_12_Template", "WorkerCompleteTaskComponent_Conditional_12_For_2_Conditional_16_Template", "WorkerCompleteTaskComponent_Conditional_12_For_2_Conditional_17_Template", "WorkerCompleteTaskComponent_Conditional_12_For_2_Conditional_18_Template", "WorkerCompleteTaskComponent_Conditional_12_For_2_Conditional_19_Template", "WorkerCompleteTaskComponent_Conditional_12_For_2_Conditional_20_Template", "WorkerCompleteTaskComponent_Conditional_12_For_2_Conditional_21_Template", "_r2", "startDownload", "Tipo_Trabajo", "formatDate", "fechaCompletado", "fecha", "jobDescription", "\u0275\u0275conditional", "getStatusClass", "estado", "pdfUrl", "reporteGenerado", "\u0275\u0275repeaterCreate", "WorkerCompleteTaskComponent_Conditional_12_For_2_Template", "_forTrack0", "\u0275\u0275repeater", "completedTasks", "\u0275\u0275property", "\u0275\u0275sanitizeResourceUrl", "_r6", "closePdfViewer", "WorkerCompleteTaskComponent_Conditional_13_Conditional_10_Template", "WorkerCompleteTaskComponent_Conditional_13_Conditional_11_Template", "selectedReport", "WorkerCompleteTaskComponent", "firestore", "inject", "Firestore", "auth", "Auth", "router", "Router", "taskService", "TaskService", "sanitizer", "DomSanitizer", "currentUser", "isLoading", "showPdfViewer", "subscriptions", "ngOnInit", "setupAuthListener", "ngOnDestroy", "forEach", "sub", "unsubscribe", "revokeObjectURL", "safeUrl", "match", "toString", "URL", "error", "console", "authSub", "onAuthStateChanged", "user", "__async", "log", "email", "loadUserData", "uid", "navigate", "push", "Subscription", "userId", "userDoc", "getDoc", "doc", "exists", "__spreadProps", "__spreadValues", "data", "IdUsuario", "loadCompletedReportes", "Error", "subscription", "getCompletedReportesByWorker", "pipe", "tap", "reportes", "catchError", "from", "subscribe", "goBack", "date", "Date", "seconds", "toLocaleDateString", "year", "month", "day", "status", "toLowerCase", "report", "event", "preventDefault", "stopPropagation", "bypassSecurityTrustResourceUrl", "loadPdfFromStorage", "IdReporte", "storage", "getStorage", "pdfPath", "pdfRef", "ref", "downloadURL", "getDownloadURL", "updateReporteWithPdfInfo", "updateError", "setTimeout", "downloadLink", "document", "createElement", "href", "download", "replace", "body", "appendChild", "click", "removeChild", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "WorkerCompleteTaskComponent_Conditional_8_Template", "WorkerCompleteTaskComponent_Conditional_9_Template", "WorkerCompleteTaskComponent_Conditional_10_Template", "WorkerCompleteTaskComponent_Conditional_11_Template", "WorkerCompleteTaskComponent_Conditional_12_Template", "WorkerCompleteTaskComponent_Conditional_13_Template", "CommonModule", "FormsModule", "PdfViewerModule", "styles"]
}
