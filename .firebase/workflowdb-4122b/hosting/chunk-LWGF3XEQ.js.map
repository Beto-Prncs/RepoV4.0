{
  "version": 3,
  "sources": ["src/app/functionalities/worker-completetask/worker-completetask.component.ts", "src/app/functionalities/worker-completetask/worker-completetask.component.html"],
  "sourcesContent": ["import { Component, OnInit, OnDestroy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { \n  Firestore, \n  collection, \n  query, \n  where, \n  getDocs, \n  collectionData,\n  doc,\n  getDoc\n} from '@angular/fire/firestore';\nimport { Auth } from '@angular/fire/auth';\nimport { FormsModule } from '@angular/forms';\nimport { PdfViewerModule } from 'ng2-pdf-viewer';\nimport { Subscription, BehaviorSubject, from, Observable, of } from 'rxjs';\nimport { map, catchError, tap, take } from 'rxjs/operators';\nimport { Reporte, Usuario, Empresa } from '../../models/interfaces';\nimport { TaskService } from '../../services/task.service';\nimport { Storage, ref, getDownloadURL } from '@angular/fire/storage';\n\n@Component({\n  selector: 'app-worker-completetask',\n  standalone: true,\n  imports: [CommonModule, FormsModule, PdfViewerModule],\n  templateUrl: './worker-completetask.component.html',\n  styleUrl: './worker-completetask.component.scss'\n})\nexport class WorkerCompleteTaskComponent implements OnInit, OnDestroy {\n  // Inyección de servicios\n  private firestore: Firestore = inject(Firestore);\n  private auth: Auth = inject(Auth);\n  private router: Router = inject(Router);\n  private taskService: TaskService = inject(TaskService);\n  private sanitizer: DomSanitizer = inject(DomSanitizer);\n  private storage: Storage = inject(Storage);\n\n  // Estados del componente\n  completedTasks: Reporte[] = [];\n  filteredTasks: Reporte[] = [];\n  currentUser: Usuario | null = null;\n  isLoading: boolean = true;\n  errorMessage: string = '';\n  successMessage: string = '';\n  searchTerm: string = '';\n  \n  // Para el visor de PDF\n  showPdfViewer: boolean = false;\n  pdfUrl: SafeUrl | null = null;\n  selectedReport: Reporte | null = null;\n  \n  // Datos de entidades y cache para empresas\n  companyNamesCache = new Map<string, string>();\n  companies$: BehaviorSubject<Empresa[]> = new BehaviorSubject<Empresa[]>([]);\n  \n  // Filtros \n  selectedCompany: string = '';\n  selectedDateFilter: string = '';\n  \n  // Para almacenar suscripciones y liberarlas en el destroy\n  private subscriptions: Subscription[] = [];\n\n  ngOnInit(): void {\n    this.setupAuthListener();\n  }\n  \n  ngOnDestroy(): void {\n    // Desuscribir para evitar memory leaks\n    this.subscriptions.forEach(sub => {\n      if (sub) sub.unsubscribe();\n    });\n    \n    // Liberar recursos URL\n    if (this.pdfUrl) {\n      this.revokeObjectURL(this.pdfUrl);\n    }\n  }\n\n  private loadCompletedReportes(userId: string): void {\n    this.isLoading = true;\n    this.errorMessage = '';\n    \n    console.log('Cargando reportes completados para usuario:', userId);\n    \n    // Usar el servicio de tareas para obtener reportes completados\n    const subscription = this.taskService.getCompletedReportesByWorker(userId).pipe(\n      tap(reportes => {\n        console.log('Reportes completados recibidos:', reportes);\n        this.completedTasks = reportes; // TaskService ya procesa las fechas\n        this.filteredTasks = [...this.completedTasks]; // Inicializar lista filtrada\n        this.applyFilters(); // Aplica filtros iniciales\n        this.isLoading = false;\n      }),\n      catchError(error => {\n        console.error('Error al cargar reportes completados:', error);\n        this.errorMessage = 'Error al cargar los reportes completados';\n        this.isLoading = false;\n        return from([]);\n      })\n    ).subscribe();\n    \n    this.subscriptions.push(subscription);\n  }\n\n  // Aplicar filtros a los reportes\n  applyFilters(): void {\n    let filtered = [...this.completedTasks];\n    \n    // Filtrar por empresa si hay una seleccionada\n    if (this.selectedCompany) {\n      filtered = filtered.filter(task => task.IdEmpresa === this.selectedCompany);\n    }\n    \n    // Filtrar por fecha si está seleccionado\n    if (this.selectedDateFilter) {\n      filtered = this.applyDateFilter(filtered);\n    }\n    \n    // Filtrar por término de búsqueda\n    if (this.searchTerm?.trim()) {\n      const searchLower = this.searchTerm.toLowerCase().trim();\n      filtered = filtered.filter(task => {\n        return (\n          (task.Tipo_Trabajo?.toLowerCase().includes(searchLower)) ||\n          (task.jobDescription?.toLowerCase().includes(searchLower)) ||\n          (task.descripcionCompletado?.toLowerCase().includes(searchLower)) ||\n          (this.getCompanyName(task.IdEmpresa).toLowerCase().includes(searchLower))\n        );\n      });\n    }\n    \n    this.filteredTasks = filtered;\n  }\n\n  // Método separado para aplicar filtros de fecha\n  private applyDateFilter(reports: Reporte[]): Reporte[] {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n    const lastMonth = new Date(today);\n    lastMonth.setMonth(lastMonth.getMonth() - 1);\n\n    return reports.filter(report => {\n      // Usar la fecha de completado para filtrar\n      const reportDate = new Date(report.fechaCompletado || report.fecha);\n      reportDate.setHours(0, 0, 0, 0);\n\n      switch (this.selectedDateFilter) {\n        case 'today':\n          return this.isSameDay(reportDate, today);\n        case 'yesterday':\n          return this.isSameDay(reportDate, yesterday);\n        case 'week':\n          return reportDate >= lastWeek;\n        case 'month':\n          return reportDate >= lastMonth;\n        default:\n          return true;\n      }\n    });\n  }\n  \n  // Verificar si dos fechas son el mismo día\n  private isSameDay(date1: Date, date2: Date): boolean {\n    return date1.getDate() === date2.getDate() &&\n           date1.getMonth() === date2.getMonth() &&\n           date1.getFullYear() === date2.getFullYear();\n  }\n\n  resetFilters(): void {\n    this.selectedCompany = '';\n    this.selectedDateFilter = '';\n    this.searchTerm = '';\n    this.filteredTasks = [...this.completedTasks];\n  }\n  \n  // Método para volver atrás\n  goBack(): void {\n    this.router.navigate(['/worker']);\n  }\n  \n  // Formatear fecha para mostrar\n  formatDate(date: any): string {\n    if (!date) return 'Fecha no disponible';\n    \n    try {\n      // Ya no necesitamos manejar Timestamp aquí\n      const dateObj = date instanceof Date ? date : new Date(date);\n      \n      return dateObj.toLocaleDateString('es-ES', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    } catch (error) {\n      console.error('Error al formatear fecha:', error);\n      return 'Fecha inválida';\n    }\n  }\n  \n  // Obtener nombre de empresa del caché\n  getCompanyName(idEmpresa: string): string {\n    return this.companyNamesCache.get(idEmpresa) || 'Empresa no disponible';\n  }\n  \n  // Determinar clase CSS según el estado\n  getStatusClass(status: string): string {\n    switch (status?.toLowerCase()) {\n      case 'completado':\n        return 'completed';\n      case 'pendiente':\n        return 'pending';\n      default:\n        return 'default';\n    }\n  }\n  \n  // Determinar clase CSS según la prioridad\n  getPriorityClass(priority: string): string {\n    switch (priority?.toLowerCase()) {\n      case 'alta':\n        return 'high';\n      case 'media':\n        return 'medium';\n      case 'baja':\n        return 'low';\n      default:\n        return 'default';\n    }\n  }\n  \n  // Abrir visor de PDF\n  openPdfViewer(report: Reporte): void {\n    this.isLoading = true;\n    this.selectedReport = report;\n    this.showPdfViewer = true;\n    \n    // Primero intentar obtener el PDF desde la URL almacenada\n    if (report.pdfUrl) {\n      try {\n        this.pdfUrl = this.sanitizer.bypassSecurityTrustResourceUrl(report.pdfUrl);\n        this.isLoading = false;\n      } catch (error) {\n        console.error('Error al cargar URL del PDF:', error);\n        this.loadPdfFromStorage(report);\n      }\n    } else {\n      // Si no hay URL directa, intentar cargar desde Storage\n      this.loadPdfFromStorage(report);\n    }\n  }\n\n  // Cerrar visor de PDF\n  closePdfViewer(): void {\n    if (this.pdfUrl) {\n      this.revokeObjectURL(this.pdfUrl);\n      this.pdfUrl = null;\n    }\n    this.showPdfViewer = false;\n    this.selectedReport = null;\n  }\n  \n  // Revocar URL para liberar memoria\n  private revokeObjectURL(safeUrl: SafeUrl): void {\n    try {\n      const urlStr = safeUrl.toString();\n      const match = urlStr.match(/blob:http[^\"']+/);\n      if (match && match[0]) {\n        URL.revokeObjectURL(match[0]);\n      }\n    } catch (error) {\n      console.error('Error al revocar URL:', error);\n    }\n  }\n  \n  // Cargar PDF desde Firebase Storage\n  private async loadPdfFromStorage(report: Reporte): Promise<void> {\n    if (!report.IdReporte) {\n      this.errorMessage = 'ID de reporte no disponible';\n      this.closePdfViewer();\n      return;\n    }\n    \n    try {\n      // Usar el método existente en TaskService para obtener la URL del PDF\n      const downloadURL = await this.taskService.getPdfUrlForReporte(report.IdReporte);\n      \n      if (downloadURL) {\n        this.pdfUrl = this.sanitizer.bypassSecurityTrustResourceUrl(downloadURL);\n        \n        // Actualizar el reporte en la lista local si la URL es nueva\n        if (!report.pdfUrl) {\n          const index = this.completedTasks.findIndex(t => t.IdReporte === report.IdReporte);\n          if (index !== -1) {\n            this.completedTasks[index] = {\n              ...this.completedTasks[index],\n              pdfUrl: downloadURL\n            };\n            \n            // Actualizar también la lista filtrada\n            const filteredIndex = this.filteredTasks.findIndex(t => t.IdReporte === report.IdReporte);\n            if (filteredIndex !== -1) {\n              this.filteredTasks[filteredIndex] = {\n                ...this.filteredTasks[filteredIndex],\n                pdfUrl: downloadURL\n              };\n            }\n          }\n        }\n      } else {\n        throw new Error('No se pudo obtener la URL del PDF');\n      }\n    } catch (error) {\n      console.error('Error al cargar PDF desde Storage:', error);\n      this.errorMessage = 'No se pudo cargar el PDF. El archivo podría no existir.';\n      setTimeout(() => this.errorMessage = '', 5000);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  \n  // Iniciar descarga de PDF\n  async startDownload(report: Reporte): Promise<void> {\n    if (!report.IdReporte) {\n      this.errorMessage = 'ID de reporte no disponible';\n      return;\n    }\n    \n    try {\n      this.isLoading = true;\n      \n      // Usar el método existente en TaskService para obtener la URL del PDF\n      const downloadURL = await this.taskService.getPdfUrlForReporte(report.IdReporte);\n      \n      if (!downloadURL) {\n        throw new Error('No se encontró el PDF');\n      }\n      \n      // Crear elemento a para descarga\n      const downloadLink = document.createElement('a');\n      downloadLink.href = downloadURL;\n      downloadLink.download = `Reporte_${report.Tipo_Trabajo.replace(/\\s+/g, '_')}.pdf`;\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n      \n      this.successMessage = 'Descarga iniciada correctamente';\n      setTimeout(() => this.successMessage = '', 3000);\n    } catch (error) {\n      console.error('Error al descargar PDF:', error);\n      this.errorMessage = 'Error al descargar el PDF';\n      setTimeout(() => this.errorMessage = '', 5000);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  \n  // Verificar si un reporte tiene imágenes de evidencia\n  hasEvidenceImages(report: Reporte): boolean {\n    return report && Array.isArray(report.evidenceImages) && report.evidenceImages.length > 0;\n  }\n  \n  // Obtener el número de imágenes de evidencia\n  getEvidenceCount(report: Reporte): number {\n    return report && Array.isArray(report.evidenceImages) ? report.evidenceImages.length : 0;\n  }\n  \n  // Verificar si el reporte tiene firma digital\n  hasSignature(report: Reporte): boolean {\n    return Boolean(report && report.firmaDigital);\n  }\n  \n  // Verificar si el reporte tiene materiales \n  hasMaterials(report: Reporte): boolean {\n    return Boolean(report && report.materialesUtilizados && report.materialesUtilizados.trim() !== '');\n  }\n  \n  // Buscar reportes con término de búsqueda\n  onSearchChange(): void {\n    this.applyFilters();\n  }\n  \n  // Cargar empresas para el filtro\n  private loadCompanies(): void {\n    const companiesRef = collection(this.firestore, 'Empresa');\n    \n    const companiesSub = collectionData(\n      companiesRef,\n      { idField: 'IdEmpresa' }\n    ).pipe(\n      take(1),\n      map(data => data as Empresa[]),\n      tap(companies => {\n        // Precarga el cache de nombres de empresas\n        companies.forEach(company => {\n          this.companyNamesCache.set(company.IdEmpresa, company.Nombre);\n        });\n        this.companies$.next(companies);\n      }),\n      catchError(error => {\n        console.error('Error al cargar empresas:', error);\n        return of([]);\n      })\n    ).subscribe();\n    \n    this.subscriptions.push(companiesSub);\n  }\n  \n  // Configurar listener de autenticación\n  private setupAuthListener(): void {\n    const authSub = this.auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        console.log('Usuario autenticado:', user.email);\n        try {\n          await this.loadUserData(user.uid);\n        } catch (error) {\n          console.error('Error en la inicialización:', error);\n          this.errorMessage = 'Error al cargar los datos del usuario';\n        }\n      } else {\n        console.log('No hay usuario autenticado');\n        this.router.navigate(['/login']);\n      }\n    });\n    \n    if (authSub) {\n      this.subscriptions.push(new Subscription(() => authSub()));\n    }\n  }\n  \n  // Cargar datos del usuario\n  private async loadUserData(userId: string): Promise<void> {\n    try {\n      console.log('Cargando datos del usuario:', userId);\n      const userDoc = await getDoc(doc(this.firestore, 'Usuario', userId));\n      \n      if (userDoc.exists()) {\n        this.currentUser = {\n          ...userDoc.data() as Usuario,\n          IdUsuario: userId\n        };\n        \n        console.log('Datos de usuario cargados:', this.currentUser);\n        \n        if (this.currentUser.IdUsuario) {\n          // Cargar reportes completados del trabajador\n          this.loadCompletedReportes(this.currentUser.IdUsuario);\n          \n          // Cargar empresas para filtrado\n          this.loadCompanies();\n        } else {\n          throw new Error('Usuario sin ID válido');\n        }\n      } else {\n        throw new Error('No se encontró el documento del usuario');\n      }\n    } catch (error) {\n      console.error('Error al cargar datos del usuario:', error);\n      this.errorMessage = 'Error al cargar los datos del usuario';\n      this.isLoading = false;\n    }\n  }\n}", "<div class=\"tasks-container\">\n  <!-- Cabecera con navegación y búsqueda -->\n  <header class=\"header-wrapper\">\n    <div class=\"top-bar\">\n      <button type=\"button\" class=\"btn-back\" (click)=\"goBack()\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\"></line>\n          <polyline points=\"12 19 5 12 12 5\"></polyline>\n        </svg>\n        Volver\n      </button>\n      <h1 class=\"page-title\">Reportes Completados</h1>\n    </div>\n    \n    <!-- Sección de búsqueda y filtros -->\n    <div class=\"search-container\">\n      <div class=\"search-bar\">\n        <svg class=\"search-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n          <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n        </svg>\n        <input\n          type=\"text\"\n          [(ngModel)]=\"searchTerm\"\n          (input)=\"onSearchChange()\"\n          placeholder=\"Buscar por título, descripción...\"\n          class=\"search-input\">\n      </div>\n    </div>\n  </header>\n  \n  <!-- Sección de filtros con diseño de tarjetas -->\n  <section class=\"filters-section\">\n    <div class=\"filters-grid\">\n      <div class=\"filter-card company\">\n        <div class=\"filter-header\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\n            <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n          </svg>\n          <label for=\"company-filter\">Empresa</label>\n        </div>\n        <select id=\"company-filter\" [(ngModel)]=\"selectedCompany\" (change)=\"applyFilters()\" class=\"filter-select\">\n          <option value=\"\">Todas las empresas</option>\n          @for (company of companies$ | async; track company.IdEmpresa) {\n            <option [value]=\"company.IdEmpresa\">{{ company.Nombre }}</option>\n          }\n        </select>\n      </div>\n\n      <div class=\"filter-card date\">\n        <div class=\"filter-header\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n            <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n            <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n            <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n          </svg>\n          <label for=\"date-filter\">Fecha de completado</label>\n        </div>\n        <select id=\"date-filter\" [(ngModel)]=\"selectedDateFilter\" (change)=\"applyFilters()\" class=\"filter-select\">\n          <option value=\"\">Todas las fechas</option>\n          <option value=\"today\">Hoy</option>\n          <option value=\"yesterday\">Ayer</option>\n          <option value=\"week\">Última semana</option>\n          <option value=\"month\">Último mes</option>\n        </select>\n      </div>\n    </div>\n\n    <button class=\"btn-reset-filters\" (click)=\"resetFilters()\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path d=\"M2 12a10 10 0 1 1 20 0 10 10 0 0 1-20 0z\"/>\n        <path d=\"M12 8v8\"/>\n        <path d=\"M8 12h8\"/>\n      </svg>\n      Limpiar filtros\n    </button>\n  </section>\n\n  <!-- Mensajes de estado -->\n  @if (errorMessage) {\n    <div class=\"alert alert-error\">\n      <svg class=\"alert-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\n        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n      </svg>\n      {{ errorMessage }}\n    </div>\n  }\n  \n  @if (successMessage) {\n    <div class=\"alert alert-success\">\n      <svg class=\"alert-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n      </svg>\n      {{ successMessage }}\n    </div>\n  }\n  \n  <!-- Estado de carga -->\n  @if (isLoading) {\n    <div class=\"loading-state\">\n      <div class=\"spinner\"></div>\n      <p>Cargando reportes completados...</p>\n    </div>\n  }\n  \n  <!-- Sin reportes -->\n  @if (!isLoading && filteredTasks.length === 0) {\n    <div class=\"no-tasks\">\n      <div class=\"empty-state\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path>\n          <line x1=\"12\" y1=\"11\" x2=\"12\" y2=\"17\"></line>\n          <line x1=\"9\" y1=\"14\" x2=\"15\" y2=\"14\"></line>\n        </svg>\n        <p>No hay reportes completados que coincidan con tu búsqueda.</p>\n        @if (selectedCompany || selectedDateFilter || searchTerm) {\n          <button class=\"btn-reset\" (click)=\"resetFilters()\">Limpiar filtros</button>\n        }\n      </div>\n    </div>\n  }\n  \n  <!-- Lista de reportes completados -->\n  @if (!isLoading && filteredTasks.length > 0) {\n    <div class=\"tasks-grid\">\n      @for (task of filteredTasks; track task.IdReporte) {\n        <div class=\"task-card\">\n          <div class=\"task-header\">\n            <h3 class=\"task-title\">{{task.Tipo_Trabajo}}</h3>\n            <div class=\"task-tags\">\n              <span class=\"status-badge\" [class]=\"getStatusClass(task.estado)\">\n                {{task.estado}}\n              </span>\n              \n              @if (task.priority) {\n                <span class=\"priority-badge\" [class]=\"getPriorityClass(task.priority)\">\n                  {{task.priority}}\n                </span>\n              }\n              \n              <!-- Badges para PDF y evidencias -->\n              @if (task.pdfUrl || task.reporteGenerado) {\n                <span class=\"pdf-badge\" title=\"PDF disponible\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                    <polyline points=\"14 2 14 8 20 8\"></polyline>\n                    <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                    <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                    <polyline points=\"10 9 9 9 8 9\"></polyline>\n                  </svg>\n                  PDF\n                </span>\n              }\n              \n              @if (hasEvidenceImages(task)) {\n                <span class=\"evidence-badge\" title=\"Contiene evidencias fotográficas\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                    <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"></circle>\n                    <polyline points=\"21 15 16 10 5 21\"></polyline>\n                  </svg>\n                  Fotos ({{getEvidenceCount(task)}})\n                </span>\n              }\n            </div>\n          </div>\n          \n          <div class=\"task-meta\">\n            <div class=\"task-date\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n                <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n                <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n              </svg>\n              <span>Completado: {{formatDate(task.fechaCompletado || task.fecha)}}</span>\n            </div>\n            <div class=\"task-company\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\n                <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n              </svg>\n              <span>{{getCompanyName(task.IdEmpresa)}}</span>\n            </div>\n            @if (task.location) {\n              <div class=\"task-location\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\n                  <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\n                </svg>\n                <span>{{task.location}}</span>\n              </div>\n            }\n          </div>\n          \n          <div class=\"task-content\">\n            <!-- Descripción del problema -->\n            <div class=\"task-description\">\n              <h4>Descripción del problema:</h4>\n              <p>{{task.jobDescription}}</p>\n            </div>\n            \n            <!-- Descripción de la solución -->\n            @if (task.descripcionCompletado) {\n              <div class=\"task-solution\">\n                <h4>Solución aplicada:</h4>\n                <p>{{task.descripcionCompletado}}</p>\n              </div>\n            }\n            \n            <!-- Materiales utilizados -->\n            @if (hasMaterials(task)) {\n              <div class=\"task-materials\">\n                <h4>Materiales utilizados:</h4>\n                <p>{{task.materialesUtilizados}}</p>\n              </div>\n            }\n            \n            <!-- Previsualización de evidencias (miniaturas) -->\n            @if (hasEvidenceImages(task)) {\n              <div class=\"evidence-preview\">\n                <h4>Evidencias incluidas:</h4>\n                <div class=\"evidence-thumbnails\">\n                  @for (imageUrl of task.evidenceImages.slice(0, 3); track $index) {\n                    <div class=\"evidence-thumbnail\">\n                      <img [src]=\"imageUrl\" alt=\"Evidencia {{$index + 1}}\">\n                    </div>\n                  }\n                  @if (task.evidenceImages.length > 3) {\n                    <div class=\"evidence-thumbnail more-indicator\" (click)=\"openPdfViewer(task)\">\n                      <span>+{{task.evidenceImages.length - 3}}</span>\n                    </div>\n                  }\n                </div>\n              </div>\n            }\n            \n            <!-- Indicador de firma -->\n            @if (hasSignature(task)) {\n              <div class=\"signature-indicator\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"></path>\n                </svg>\n                <span>Incluye firma digital</span>\n              </div>\n            }\n\n            <!-- Indicador de materiales -->\n            @if (hasMaterials(task)) {\n              <div class=\"materials-indicator\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M3 3h18v18H3zM12 8v8M8 12h8\"></path>\n                </svg>\n                <span>Materiales detallados</span>\n              </div>\n            }\n          </div>\n          \n          <div class=\"task-actions\">\n            <button type=\"button\" class=\"btn-view\" (click)=\"openPdfViewer(task)\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\n                <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n              </svg>\n              Ver reporte\n            </button>\n            \n            <button type=\"button\" class=\"btn-download\" (click)=\"startDownload(task)\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\n                <polyline points=\"7 10 12 15 17 10\"></polyline>\n                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\n              </svg>\n              Descargar PDF\n            </button>\n          </div>\n        </div>\n      }\n    </div>\n  }\n  \n  <!-- Modal de vista previa de PDF mejorado -->\n  @if (showPdfViewer && selectedReport) {\n    <div class=\"pdf-modal-overlay\">\n      <div class=\"pdf-modal\">\n        <div class=\"modal-header\">\n          <div class=\"modal-title\">\n            <h3>{{selectedReport.Tipo_Trabajo}}</h3>\n            <span class=\"modal-subtitle\">{{formatDate(selectedReport.fechaCompletado || selectedReport.fecha)}}</span>\n          </div>\n          <button type=\"button\" class=\"btn-close\" (click)=\"closePdfViewer()\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"modal-body\">\n          <!-- Si tienes un PDF, muéstralo -->\n          @if (pdfUrl) {\n            <iframe [src]=\"pdfUrl\" width=\"100%\" height=\"100%\" frameborder=\"0\"></iframe>\n          } \n          <!-- Si no tienes PDF pero tienes evidencias, muestra las imágenes -->\n          @else if (hasEvidenceImages(selectedReport) && !pdfUrl) {\n            <div class=\"evidence-gallery\">\n              <h4>Evidencias del reporte (No se pudo cargar el PDF)</h4>\n              <div class=\"evidence-images\">\n                @for (imageUrl of selectedReport.evidenceImages; track $index) {\n                  <div class=\"evidence-image-container\">\n                    <img [src]=\"imageUrl\" alt=\"Evidencia {{$index + 1}}\">\n                  </div>\n                }\n              </div>\n              \n              <!-- Mostrar firma si existe -->\n              @if (hasSignature(selectedReport)) {\n                <div class=\"signature-section\">\n                  <h4>Firma del trabajador</h4>\n                  <div class=\"signature-image\">\n                    <img [src]=\"selectedReport.firmaDigital\" alt=\"Firma digital\">\n                  </div>\n                </div>\n              }\n            </div>\n          }\n          <!-- Estado de carga -->\n          @else {\n            <div class=\"pdf-loading\">\n              <div class=\"spinner\"></div>\n              <p>Cargando contenido...</p>\n            </div>\n          }\n        </div>\n        \n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn-cancel\" (click)=\"closePdfViewer()\">Cerrar</button>\n          <button type=\"button\" class=\"btn-download\" (click)=\"startDownload(selectedReport)\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\n              <polyline points=\"7 10 12 15 17 10\"></polyline>\n              <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\n            </svg>\n            Descargar PDF\n          </button>\n        </div>\n      </div>\n    </div>\n  }\n</div>"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "company_r1", "IdEmpresa", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "Nombre", "\u0275\u0275element", "\u0275\u0275textInterpolate1", "ctx_r1", "errorMessage", "successMessage", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "resetFilters", "\u0275\u0275template", "WorkerCompleteTaskComponent_Conditional_60_Conditional_8_Template", "\u0275\u0275conditional", "selectedCompany", "selectedDateFilter", "searchTerm", "\u0275\u0275classMap", "getPriorityClass", "task_r5", "priority", "getEvidenceCount", "location", "descripcionCompletado", "materialesUtilizados", "\u0275\u0275propertyInterpolate1", "$index_r7", "imageUrl_r6", "\u0275\u0275sanitizeUrl", "_r8", "$implicit", "openPdfViewer", "evidenceImages", "length", "\u0275\u0275repeaterCreate", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_34_For_5_Template", "\u0275\u0275repeaterTrackByIndex", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_34_Conditional_6_Template", "\u0275\u0275repeater", "slice", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_7_Template", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_8_Template", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_9_Template", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_25_Template", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_32_Template", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_33_Template", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_34_Template", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_35_Template", "WorkerCompleteTaskComponent_Conditional_61_For_2_Conditional_36_Template", "_r4", "startDownload", "Tipo_Trabajo", "getStatusClass", "estado", "pdfUrl", "reporteGenerado", "hasEvidenceImages", "formatDate", "fechaCompletado", "fecha", "getCompanyName", "jobDescription", "hasMaterials", "hasSignature", "WorkerCompleteTaskComponent_Conditional_61_For_2_Template", "_forTrack1", "filteredTasks", "\u0275\u0275sanitizeResourceUrl", "$index_r11", "imageUrl_r10", "selectedReport", "firmaDigital", "WorkerCompleteTaskComponent_Conditional_62_Conditional_14_For_5_Template", "WorkerCompleteTaskComponent_Conditional_62_Conditional_14_Conditional_6_Template", "_r9", "closePdfViewer", "WorkerCompleteTaskComponent_Conditional_62_Conditional_13_Template", "WorkerCompleteTaskComponent_Conditional_62_Conditional_14_Template", "WorkerCompleteTaskComponent_Conditional_62_Conditional_15_Template", "WorkerCompleteTaskComponent", "firestore", "inject", "Firestore", "auth", "Auth", "router", "Router", "taskService", "TaskService", "sanitizer", "DomSanitizer", "storage", "Storage", "completedTasks", "currentUser", "isLoading", "showPdfViewer", "companyNamesCache", "Map", "companies$", "BehaviorSubject", "subscriptions", "ngOnInit", "setupAuthListener", "ngOnDestroy", "forEach", "sub", "unsubscribe", "revokeObjectURL", "loadCompletedReportes", "userId", "console", "log", "subscription", "getCompletedReportesByWorker", "pipe", "tap", "reportes", "applyFilters", "catchError", "error", "from", "subscribe", "push", "filtered", "filter", "task", "applyDateFilter", "trim", "searchLower", "toLowerCase", "includes", "reports", "today", "Date", "setHours", "yesterday", "setDate", "getDate", "lastWeek", "lastMonth", "setMonth", "getMonth", "report", "reportDate", "isSameDay", "date1", "date2", "getFullYear", "goBack", "navigate", "date", "toLocaleDateString", "year", "month", "day", "idEmpresa", "get", "status", "bypassSecurityTrustResourceUrl", "loadPdfFromStorage", "safeUrl", "match", "toString", "URL", "__async", "IdReporte", "downloadURL", "getPdfUrlForReporte", "index", "findIndex", "t", "__spreadProps", "__spreadValues", "filteredIndex", "Error", "setTimeout", "downloadLink", "document", "createElement", "href", "download", "replace", "body", "appendChild", "click", "removeChild", "Array", "isArray", "Boolean", "onSearchChange", "loadCompanies", "companiesRef", "collection", "companiesSub", "collectionData", "idField", "take", "map", "data", "companies", "company", "set", "next", "of", "authSub", "onAuthStateChanged", "user", "email", "loadUserData", "uid", "Subscription", "userDoc", "getDoc", "doc", "exists", "IdUsuario", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "WorkerCompleteTaskComponent_For_29_Template", "_forTrack0", "WorkerCompleteTaskComponent_Conditional_57_Template", "WorkerCompleteTaskComponent_Conditional_58_Template", "WorkerCompleteTaskComponent_Conditional_59_Template", "WorkerCompleteTaskComponent_Conditional_60_Template", "WorkerCompleteTaskComponent_Conditional_61_Template", "WorkerCompleteTaskComponent_Conditional_62_Template", "\u0275\u0275twoWayProperty", "\u0275\u0275pipeBind1", "CommonModule", "AsyncPipe", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgModel", "PdfViewerModule", "styles"]
}
