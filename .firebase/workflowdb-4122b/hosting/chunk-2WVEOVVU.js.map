{
  "version": 3,
  "sources": ["src/app/services/company.service.ts"],
  "sourcesContent": ["// src/app/services/company.service.ts\nimport { Injectable, inject } from '@angular/core';\nimport { \n  Firestore, \n  collection, \n  collectionData, \n  doc, \n  addDoc, \n  deleteDoc, \n  updateDoc, \n  query, \n  where, \n  getDocs \n} from '@angular/fire/firestore';\nimport { Observable, map, from, of } from 'rxjs';\nimport { Empresa } from '../models/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompanyService {\n  private firestore: Firestore = inject(Firestore);\n\n  // Obtener todas las empresas\n  getCompanies(): Observable<Empresa[]> {\n    const empresasRef = collection(this.firestore, 'Empresa');\n    return collectionData(empresasRef, { idField: 'IdEmpresa' })\n      .pipe(\n        map(companies => companies as Empresa[])\n      );\n  }\n\n  // Añadir una nueva empresa\n  async addCompany(companyData: Partial<Empresa>): Promise<string> {\n    try {\n      // Verificar si ya existe una empresa con el mismo nombre\n      const companyRef = collection(this.firestore, 'Empresa');\n      const q = query(companyRef, where('Nombre', '==', companyData.Nombre));\n      const querySnapshot = await getDocs(q);\n      \n      if (!querySnapshot.empty) {\n        throw new Error('Ya existe una empresa con este nombre');\n      }\n      \n      // Crear nueva empresa\n      const docRef = await addDoc(collection(this.firestore, 'Empresa'), companyData);\n      \n      // Actualizar con su propio ID\n      await updateDoc(docRef, { IdEmpresa: docRef.id });\n      \n      return docRef.id;\n    } catch (error) {\n      console.error('Error al añadir empresa:', error);\n      throw error;\n    }\n  }\n\n  // Eliminar una empresa\n  async deleteCompany(companyId: string): Promise<void> {\n    try {\n      // Verificar si hay reportes asociados a esta empresa\n      const reportesRef = collection(this.firestore, 'Reportes');\n      const q = query(reportesRef, where('IdEmpresa', '==', companyId));\n      const querySnapshot = await getDocs(q);\n      \n      if (!querySnapshot.empty) {\n        throw new Error('No se puede eliminar la empresa porque hay reportes asociados a ella');\n      }\n      \n      // Obtener la referencia del documento por ID\n      const companyQuery = query(\n        collection(this.firestore, 'Empresa'),\n        where('IdEmpresa', '==', companyId)\n      );\n      const companySnapshot = await getDocs(companyQuery);\n      \n      if (companySnapshot.empty) {\n        throw new Error('Empresa no encontrada');\n      }\n      \n      // Eliminar el documento\n      await deleteDoc(doc(this.firestore, 'Empresa', companySnapshot.docs[0].id));\n    } catch (error) {\n      console.error('Error al eliminar empresa:', error);\n      throw error;\n    }\n  }\n}"],
  "mappings": "qMAoBA,IAAaA,GAAc,IAAA,CAArB,MAAOA,CAAc,CACjBC,UAAuBC,EAAOC,CAAS,EAG/CC,cAAY,CACV,IAAMC,EAAcC,EAAW,KAAKL,UAAW,SAAS,EACxD,OAAOM,EAAeF,EAAa,CAAEG,QAAS,WAAW,CAAE,EACxDC,KACCC,EAAIC,GAAaA,CAAsB,CAAC,CAE9C,CAGMC,WAAWC,EAA6B,QAAAC,EAAA,sBAC5C,GAAI,CAEF,IAAMC,EAAaT,EAAW,KAAKL,UAAW,SAAS,EACjDe,EAAIC,EAAMF,EAAYG,EAAM,SAAU,KAAML,EAAYM,MAAM,CAAC,EAGrE,GAAI,EAFkB,MAAMC,EAAQJ,CAAC,GAElBK,MACjB,MAAM,IAAIC,MAAM,uCAAuC,EAIzD,IAAMC,EAAS,MAAMC,EAAOlB,EAAW,KAAKL,UAAW,SAAS,EAAGY,CAAW,EAG9E,aAAMY,EAAUF,EAAQ,CAAEG,UAAWH,EAAOI,EAAE,CAAE,EAEzCJ,EAAOI,EAChB,OAASC,EAAO,CACdC,cAAQD,MAAM,8BAA4BA,CAAK,EACzCA,CACR,CACF,GAGME,cAAcC,EAAiB,QAAAjB,EAAA,sBACnC,GAAI,CAEF,IAAMkB,EAAc1B,EAAW,KAAKL,UAAW,UAAU,EACnDe,EAAIC,EAAMe,EAAad,EAAM,YAAa,KAAMa,CAAS,CAAC,EAGhE,GAAI,EAFkB,MAAMX,EAAQJ,CAAC,GAElBK,MACjB,MAAM,IAAIC,MAAM,sEAAsE,EAIxF,IAAMW,EAAehB,EACnBX,EAAW,KAAKL,UAAW,SAAS,EACpCiB,EAAM,YAAa,KAAMa,CAAS,CAAC,EAE/BG,EAAkB,MAAMd,EAAQa,CAAY,EAElD,GAAIC,EAAgBb,MAClB,MAAM,IAAIC,MAAM,uBAAuB,EAIzC,MAAMa,EAAUC,EAAI,KAAKnC,UAAW,UAAWiC,EAAgBG,KAAK,CAAC,EAAEV,EAAE,CAAC,CAC5E,OAASC,EAAO,CACdC,cAAQD,MAAM,6BAA8BA,CAAK,EAC3CA,CACR,CACF,8CAlEW5B,EAAc,6BAAdA,EAAcsC,QAAdtC,EAAcuC,UAAAC,WAFb,MAAM,CAAA,SAEPxC,CAAc,GAAA",
  "names": ["CompanyService", "firestore", "inject", "Firestore", "getCompanies", "empresasRef", "collection", "collectionData", "idField", "pipe", "map", "companies", "addCompany", "companyData", "__async", "companyRef", "q", "query", "where", "Nombre", "getDocs", "empty", "Error", "docRef", "addDoc", "updateDoc", "IdEmpresa", "id", "error", "console", "deleteCompany", "companyId", "reportesRef", "companyQuery", "companySnapshot", "deleteDoc", "doc", "docs", "factory", "\u0275fac", "providedIn"]
}
