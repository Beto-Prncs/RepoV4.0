{
  "version": 3,
  "sources": ["src/app/Components/login/login.component.ts", "src/app/Components/login/login.component.html"],
  "sourcesContent": ["import { Component, OnInit, NgZone } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport {\n  Auth,\n  User,\n  signInWithEmailAndPassword,\n} from '@angular/fire/auth';\nimport {\n  Firestore,\n  collection,\n  query,\n  where,\n  getDocs,\n  doc,\n  setDoc,\n  getDoc,\n} from '@angular/fire/firestore';\nimport { AuthService } from '../../services/auth.service';\nimport { Usuario } from '../../models/interfaces';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [FormsModule, CommonModule, RouterModule],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss'\n})\n\nexport class LoginComponent implements OnInit {\n  showPassword = false;\n  constructor(\n    private auth: Auth,\n    private firestore: Firestore,\n    private router: Router,\n    private ngZone: NgZone,\n    private authService: AuthService\n  ) {}\n\n  usuario = {\n    identifier: '', // Ahora acepta email o username\n    password: ''\n  };\n\n  showError = false;\n  errorMessage = 'Usuario o contraseña incorrectos';\n  isLoading = false;\n\n  onInputChange(): void {\n    this.showError = false;\n  }\n\n  async Ingresa(): Promise<void> {\n    // Validar campos\n    if (!this.usuario.identifier || !this.usuario.password) {\n      this.showAuthError('Por favor, complete todos los campos');\n      return;\n    }\n  \n    // Validar formato de email\n    if (!this.isValidEmail(this.usuario.identifier)) {\n      this.showAuthError('Por favor, ingrese un correo electrónico válido');\n      return;\n    }\n  \n    this.isLoading = true;\n    try {\n      const userEmail = this.usuario.identifier;\n  \n      // Buscar el usuario en Firestore para verificar la contraseña\n      try {\n        console.log('Buscando usuario por email:', userEmail); \n        const usersRef = collection(this.firestore, 'Usuario'); \n        const q = query(usersRef, where('Correo', '==', userEmail)); \n        const querySnapshot = await getDocs(q);\n        \n        if (querySnapshot.empty) {\n          console.log('Usuario no encontrado por email en Firestore');\n          // No mostramos error aquí, continuamos con la autenticación de Firebase\n        } else {\n          const userData = querySnapshot.docs[0].data(); \n          const userId = querySnapshot.docs[0].id;\n          \n          // Verificar si la contraseña en Firestore coincide\n          if (userData['Password'] !== this.usuario.password) {\n            console.log('La contraseña en Firestore no coincide con la ingresada'); \n            this.showAuthError('Contraseña incorrecta');\n            this.isLoading = false;\n            return;\n          }\n        }\n      } catch (error) {\n        console.error('Error buscando usuario por email:', error);\n        // No mostramos error aquí, continuamos con la autenticación de Firebase\n      }\n  \n      // Intentar iniciar sesión con Firebase Auth\n      try {\n        console.log('Intentando login con Firebase Auth para email:', userEmail); \n        const userCredential = await signInWithEmailAndPassword(\n          this.auth, \n          userEmail,\n          this.usuario.password\n        );\n        \n        // Si llegamos aquí, el login con Firebase Auth fue exitoso \n        console.log('Login con Firebase Auth exitoso');\n        // Procesamos el login exitoso\n        await this.processUserLogin(userCredential.user);\n      } catch (authError: any) {\n        console.error('Error en autenticación con Firebase:', authError);\n        // Manejar errores específicos de Firebase Auth \n        if (authError.code === 'auth/user-not-found') { \n          this.showAuthError('Usuario no encontrado');\n        } else if (authError.code === 'auth/wrong-password') { \n          this.showAuthError('Contraseña incorrecta');\n        } else if (authError.code === 'auth/invalid-credential') { \n          this.showAuthError('Credenciales inválidas');\n        } else if (authError.code === 'auth/invalid-email') {\n          this.showAuthError('Correo electrónico inválido');\n        } else {\n          this.showAuthError('Error de autenticación: ' + authError.message);\n        }\n        this.isLoading = false;\n      }\n    } catch (error: any) {\n      console.error('Error general en login:', error); \n      this.showAuthError('Error al iniciar sesión'); \n      this.isLoading = false;\n    }\n  }\n\n  // Nuevo método para validar si una cadena es un email\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  // Nuevo método para buscar usuario por username\n  \n\n  async signInWithGoogle(): Promise<void> {\n    this.isLoading = true;\n    try {\n      // Usar el método del AuthService en lugar de llamar directamente\n      const result = await this.authService.loginWithGoogle();\n      if (result.user) {\n        await this.processUserLogin(result.user);\n      } else {\n        this.showAuthError('No se pudo obtener la información del usuario');\n      }\n    } catch (error: any) {\n      this.handleGoogleAuthError(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async processUserLogin(user: User): Promise<void> {\n    try {\n      if (!user.email) {\n        this.showAuthError('Correo electrónico no disponible');\n        return;\n      }\n      // Verificar si el usuario existe en la base de datos usando el campo Correo\n      const usuariosRef = collection(this.firestore, 'Usuario');\n      const q = query(usuariosRef, where('Correo', '==', user.email));\n      const querySnapshot = await getDocs(q);\n      if (!querySnapshot.empty) {\n        const docSnapshot = querySnapshot.docs[0];\n        const userData = docSnapshot.data() as Usuario;\n        // Crear o actualizar documento utilizando el UID de autenticación como ID del documento\n        const userDocRef = doc(this.firestore, 'Usuario', user.uid);\n        const userDocSnap = await getDoc(userDocRef);\n        if (!userDocSnap.exists()) {\n          // Si no existe documento con el UID como ID, crear uno nuevo\n          await setDoc(userDocRef, {\n            ...userData,\n            Correo: user.email,\n            IdUsuario: user.uid\n          });\n          console.log('Documento de usuario creado con UID como ID:', user.uid);\n        }\n        // Almacenar información de usuario\n        localStorage.setItem('userRole', userData.Rol);\n        localStorage.setItem('userEmail', userData.Correo);\n        localStorage.setItem('userUid', user.uid);\n        if (userData.Username) {\n          localStorage.setItem('username', userData.Username);\n        }\n        \n        // Redirección usando ngZone para manejar el contexto de Angular\n        this.ngZone.run(() => {\n          switch(userData.Rol) {\n            case 'admin':\n              this.router.navigate(['/admin1']);\n              break;\n            case 'worker':\n              this.router.navigate(['/worker']);\n              break;\n            default:\n              this.showAuthError('Usuario sin rol asignado');\n              this.authService.signOut(); // Usar el método del servicio\n          }\n        });\n      } else {\n        await this.authService.signOut(); // Usar el método del servicio\n        this.showAuthError('Usuario no registrado en el sistema');\n      }\n    } catch (error) {\n      console.error('Error al procesar inicio de sesión:', error);\n      await this.authService.signOut(); // Usar el método del servicio\n      this.showAuthError('Error al verificar permisos');\n    }\n  }\n\n  private handleAuthError(error: any): void {\n    this.showError = true;\n    switch (error.code) {\n      case 'auth/user-not-found':\n        this.errorMessage = 'Usuario no encontrado';\n        break;\n      case 'auth/wrong-password':\n        this.errorMessage = 'Contraseña incorrecta';\n        break;\n      case 'auth/invalid-email':\n        this.errorMessage = 'Correo electrónico inválido';\n        break;\n      default:\n        this.errorMessage = 'Error al iniciar sesión';\n    }\n    this.usuario.password = '';\n  }\n\n  private handleGoogleAuthError(error: any): void {\n    this.showError = true;\n    switch (error.code) {\n      case 'auth/popup-blocked':\n        this.errorMessage = 'El popup fue bloqueado. Por favor, permite ventanas emergentes.';\n        break;\n      case 'auth/popup-closed-by-user':\n        this.errorMessage = 'Inicio de sesión cancelado';\n        break;\n      case 'auth/unauthorized-domain':\n        this.errorMessage = 'Dominio no autorizado. Contacte al administrador.';\n        break;\n      default:\n        this.errorMessage = 'Error al iniciar sesión con Google';\n    }\n  }\n\n  private showAuthError(message: string): void {\n    this.showError = true;\n    this.errorMessage = message;\n  }\n\n  ngOnInit() {\n    // Verificar si viene de un cierre de sesión forzado\n    const urlParams = new URLSearchParams(window.location.search);\n    const forceRefresh = urlParams.get('forceRefresh');\n    if (forceRefresh === 'true') {\n      // Asegurarse de limpiar todo el estado localmente\n      localStorage.clear();\n      sessionStorage.clear();\n      // Forzar limpieza de IndexedDB\n      const cleanupPromises = ['firebaseLocalStorageDb', 'firebaseAuth']\n        .map(dbName => this.deleteIndexedDB(dbName));\n      Promise.all(cleanupPromises).finally(() => {\n        // Configurar persistencia\n        this.authService.setPersistenceSession();\n        // Limpieza de URL\n        const cleanUrl = new URL(window.location.href);\n        cleanUrl.searchParams.delete('forceRefresh');\n        cleanUrl.searchParams.delete('t');\n        window.history.replaceState({}, document.title, cleanUrl.pathname);\n      });\n    } else {\n      // Configurar persistencia normalmente\n      this.authService.setPersistenceSession();\n    }\n  }\n\n  // Método auxiliar para eliminar bases de datos IndexedDB\n  private deleteIndexedDB(dbName: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.deleteDatabase(dbName);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject();\n      request.onblocked = () => {\n        console.warn(`Base de datos ${dbName} bloqueada, cerrando conexiones...`);\n        resolve(); // Continuamos de todos modos\n      };\n    });\n  }\n\n  // Método para navegar a la página de recuperación de contraseña\n  goToPasswordRecovery(): void {\n    this.router.navigate(['/recuperar-contrasena']);\n  }\n  togglePasswordVisibility(): void {\n    this.showPassword = !this.showPassword;\n  }\n}", "<!-- login.component.html - Versión mejorada y refinada -->\n<div class=\"login-container\">\n  <!-- Elementos decorativos de fondo animados -->\n  <div class=\"background-blob background-blob-1\"></div>\n  <div class=\"background-blob background-blob-2\"></div>\n  <div class=\"background-blob background-blob-3\"></div>\n  \n  <!-- Tarjeta de Login -->\n  <div class=\"login-card\">\n    <!-- Encabezado con logo -->\n    <div class=\"card-header\">\n      <div class=\"logo-container\">\n        <img src=\"icons/logo_Repo.png\" alt=\"Logo de la Aplicación\" class=\"app-logo\" />\n      </div>\n      <h1 class=\"welcome-title\">¡Hola!</h1>\n      <p class=\"welcome-subtitle\">Inicia sesión para comenzar</p>\n    </div>\n    \n    <!-- Cuerpo del formulario -->\n    <div class=\"card-body\">\n      <!-- Mensaje de error -->\n      <div *ngIf=\"showError\" class=\"error-message\">\n        {{ errorMessage }}\n      </div>\n      \n      <!-- Botón de Google -->\n      <button \n        type=\"button\" \n        (click)=\"signInWithGoogle()\" \n        [disabled]=\"isLoading\"\n        class=\"btn-google\"\n      >\n        <span class=\"google-icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 488 512\">\n            <path d=\"M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z\"/>\n          </svg>\n        </span>\n        <span>Continuar con Google</span>\n      </button>\n      \n      <!-- Divisor -->\n      <div class=\"divider\">\n        <span>o</span>\n      </div>\n      \n      <!-- Formulario de login -->\n      <form class=\"login-form\">\n        <!-- Usuario/Email -->\n        <div class=\"form-group\">\n          <label for=\"user-email\">Correo electrónico</label>\n          <div class=\"input-wrapper\">\n            <input\n              id=\"user-email\"\n              type=\"text\"\n              placeholder=\"Usuario o correo electrónico\"\n              [(ngModel)]=\"usuario.identifier\"\n              name=\"identifier\"\n              (input)=\"onInputChange()\"\n              [class.input-error]=\"showError\"\n            >\n            <div class=\"input-icon\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n                <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n                <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n              </svg>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Contraseña -->\n        <div class=\"form-group\">\n          <label for=\"password\">Contraseña</label>\n          <div class=\"input-wrapper\">\n            <input\n              id=\"password\"\n              [type]=\"showPassword ? 'text' : 'password'\"\n              placeholder=\"Contraseña\"\n              [(ngModel)]=\"usuario.password\"\n              name=\"password\"\n              (input)=\"onInputChange()\"\n              [class.input-error]=\"showError\"\n            >\n            <div class=\"input-icon\" (click)=\"togglePasswordVisibility()\">\n              <!-- Ícono para mostrar contraseña (ojo cerrado) -->\n              <svg *ngIf=\"!showPassword\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" \n                stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n                <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"></path>\n                <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>\n              </svg>\n              <!-- Ícono para ocultar contraseña (ojo abierto) -->\n              <svg *ngIf=\"showPassword\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" \n                stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon\">\n                <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\n                <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n              </svg>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Opciones adicionales -->\n        <div class=\"options-container\">\n          <div class=\"remember-me\">\n            <input \n              type=\"checkbox\" \n              id=\"remember-me\" \n            >\n            <label for=\"remember-me\">Recordarme</label>\n          </div>\n          <a \n            (click)=\"goToPasswordRecovery()\" \n            class=\"forgot-password\"\n          >\n            ¿Olvidaste tu contraseña?\n          </a>\n        </div>\n        \n        <!-- Botón de Inicio de Sesión -->\n        <button \n          type=\"button\" \n          (click)=\"Ingresa()\" \n          [disabled]=\"isLoading\"\n          class=\"btn-login\"\n        >\n          <span *ngIf=\"!isLoading\">Iniciar sesión</span>\n          <span *ngIf=\"isLoading\" class=\"loader\">\n            <svg class=\"spinner\" viewBox=\"0 0 50 50\">\n              <circle class=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"5\"></circle>\n            </svg>\n            <span>Cargando...</span>\n          </span>\n        </button>\n      </form>\n    </div>\n  </div>\n</div>"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r0", "errorMessage", "\u0275\u0275element", "LoginComponent", "auth", "firestore", "router", "ngZone", "authService", "showPassword", "constructor", "usuario", "identifier", "password", "showError", "isLoading", "onInputChange", "Ingresa", "__async", "showAuthError", "isValidEmail", "userEmail", "console", "log", "usersRef", "collection", "q", "query", "where", "querySnapshot", "getDocs", "empty", "userData", "docs", "data", "userId", "id", "error", "userCredential", "signInWithEmailAndPassword", "processUserLogin", "user", "authError", "code", "message", "email", "test", "signInWithGoogle", "result", "loginWithGoogle", "handleGoogleAuthError", "usuariosRef", "signOut", "userDocRef", "doc", "uid", "getDoc", "exists", "setDoc", "__spreadProps", "__spreadValues", "Correo", "IdUsuario", "localStorage", "setItem", "Rol", "Username", "run", "navigate", "handleAuthError", "ngOnInit", "URLSearchParams", "window", "location", "search", "get", "clear", "sessionStorage", "cleanupPromises", "map", "dbName", "deleteIndexedDB", "Promise", "all", "finally", "setPersistenceSession", "cleanUrl", "URL", "href", "searchParams", "delete", "history", "replaceState", "document", "title", "pathname", "resolve", "reject", "request", "indexedDB", "deleteDatabase", "onsuccess", "onerror", "onblocked", "warn", "goToPasswordRecovery", "togglePasswordVisibility", "\u0275\u0275directiveInject", "Auth", "Firestore", "Router", "NgZone", "AuthService", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275template", "LoginComponent_div_13_Template", "\u0275\u0275listener", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "LoginComponent__svg_svg_39_Template", "LoginComponent__svg_svg_40_Template", "LoginComponent_span_49_Template", "LoginComponent_span_50_Template", "\u0275\u0275property", "\u0275\u0275classProp", "\u0275\u0275twoWayProperty", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "NgModel", "NgForm", "CommonModule", "NgIf", "RouterModule", "styles"]
}
