{"version":3,"sources":["node_modules/@firebase/functions/dist/esm/index.esm2017.js","node_modules/@angular/fire/fesm2022/angular-fire-functions.mjs"],"sourcesContent":["import { _isFirebaseServerApp, _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\nimport { FirebaseError, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\nfunction mapValues(\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  const result = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n/**\n * Takes data and encodes it in a JSON-friendly way, such that types such as\n * Date are preserved.\n * @internal\n * @param data - Data to encode.\n */\nfunction encode(data) {\n  if (data == null) {\n    return null;\n  }\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n  if (data === true || data === false) {\n    return data;\n  }\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data, x => encode(x));\n  }\n  // If we got this far, the data is not encodable.\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n/**\n * Takes data that's been encoded in a JSON-friendly form and returns a form\n * with richer datatypes, such as Dates, etc.\n * @internal\n * @param json - JSON to convert.\n */\nfunction decode(json) {\n  if (json == null) {\n    return json;\n  }\n  if (json['@type']) {\n    switch (json['@type']) {\n      case LONG_TYPE:\n      // Fall through and handle this the same as unsigned.\n      case UNSIGNED_LONG_TYPE:\n        {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number(json['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n      default:\n        {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n    }\n  }\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json, x => decode(x));\n  }\n  // Anything else is safe to return.\n  return json;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\n * An error returned by the Firebase Functions client SDK.\n *\n * See {@link FunctionsErrorCode} for full documentation of codes.\n *\n * @public\n */\nclass FunctionsError extends FirebaseError {\n  /**\n   * Constructs a new instance of the `FunctionsError` class.\n   */\n  constructor(\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  code, message,\n  /**\n   * Additional details to be converted to JSON and included in the error response.\n   */\n  details) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n    this.details = details;\n    // Since the FirebaseError constructor sets the prototype of `this` to FirebaseError.prototype,\n    // we also have to do it in all subclasses to allow for correct `instanceof` checks.\n    Object.setPrototypeOf(this, FunctionsError.prototype);\n  }\n}\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n  }\n  return 'unknown';\n}\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nfunction _errorForResponse(status, bodyJSON) {\n  let code = codeForHTTPStatus(status);\n  // Start with reasonable defaults from the status code.\n  let description = code;\n  let details = undefined;\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n  return new FunctionsError(code, description, details);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper class to get metadata that should be included with a function call.\n * @internal\n */\nclass ContextProvider {\n  constructor(app, authProvider, messagingProvider, appCheckProvider) {\n    this.app = app;\n    this.auth = null;\n    this.messaging = null;\n    this.appCheck = null;\n    this.serverAppAppCheckToken = null;\n    if (_isFirebaseServerApp(app) && app.settings.appCheckToken) {\n      this.serverAppAppCheckToken = app.settings.appCheckToken;\n    }\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n    if (!this.auth) {\n      authProvider.get().then(auth => this.auth = auth, () => {\n        /* get() never rejects */\n      });\n    }\n    if (!this.messaging) {\n      messagingProvider.get().then(messaging => this.messaging = messaging, () => {\n        /* get() never rejects */\n      });\n    }\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck, () => {\n        /* get() never rejects */\n      });\n    }\n  }\n  async getAuthToken() {\n    if (!this.auth) {\n      return undefined;\n    }\n    try {\n      const token = await this.auth.getToken();\n      return token === null || token === void 0 ? void 0 : token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n  async getMessagingToken() {\n    if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n      return undefined;\n    }\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n  async getAppCheckToken(limitedUseAppCheckTokens) {\n    if (this.serverAppAppCheckToken) {\n      return this.serverAppAppCheckToken;\n    }\n    if (this.appCheck) {\n      const result = limitedUseAppCheckTokens ? await this.appCheck.getLimitedUseToken() : await this.appCheck.getToken();\n      if (result.error) {\n        // Do not send the App Check header to the functions endpoint if\n        // there was an error from the App Check exchange endpoint. The App\n        // Check SDK will already have logged the error to console.\n        return null;\n      }\n      return result.token;\n    }\n    return null;\n  }\n  async getContext(limitedUseAppCheckTokens) {\n    const authToken = await this.getAuthToken();\n    const messagingToken = await this.getMessagingToken();\n    const appCheckToken = await this.getAppCheckToken(limitedUseAppCheckTokens);\n    return {\n      authToken,\n      messagingToken,\n      appCheckToken\n    };\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_REGION = 'us-central1';\nconst responseLineRE = /^data: (.*?)(?:\\n|$)/;\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type FunctionsError.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(millis) {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timer = null;\n  return {\n    promise: new Promise((_, reject) => {\n      timer = setTimeout(() => {\n        reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n      }, millis);\n    }),\n    cancel: () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }\n  };\n}\n/**\n * The main class for the Firebase Functions SDK.\n * @internal\n */\nclass FunctionsService {\n  /**\n   * Creates a new Functions service for the given app.\n   * @param app - The FirebaseApp to use.\n   */\n  constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl = (...args) => fetch(...args)) {\n    this.app = app;\n    this.fetchImpl = fetchImpl;\n    this.emulatorOrigin = null;\n    this.contextProvider = new ContextProvider(app, authProvider, messagingProvider, appCheckProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    });\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin + (url.pathname === '/' ? '' : url.pathname);\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n  _delete() {\n    return this.deleteService();\n  }\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name - The name of the callable.\n   * @internal\n   */\n  _url(name) {\n    const projectId = this.app.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n}\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host The emulator host (ex: localhost)\n * @param port The emulator port (ex: 5001)\n * @public\n */\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n/**\n * Returns a reference to the callable https trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nfunction httpsCallable$1(functionsInstance, name, options) {\n  const callable = data => {\n    return call(functionsInstance, name, data, options || {});\n  };\n  callable.stream = (data, options) => {\n    return stream(functionsInstance, name, data, options);\n  };\n  return callable;\n}\n/**\n * Returns a reference to the callable https trigger with the given url.\n * @param url - The url of the trigger.\n * @public\n */\nfunction httpsCallableFromURL$1(functionsInstance, url, options) {\n  const callable = data => {\n    return callAtURL(functionsInstance, url, data, options || {});\n  };\n  callable.stream = (data, options) => {\n    return streamAtURL(functionsInstance, url, data, options || {});\n  };\n  return callable;\n}\n/**\n * Does an HTTP POST and returns the completed response.\n * @param url The url to post to.\n * @param body The JSON body of the post.\n * @param headers The HTTP headers to include in the request.\n * @return A Promise that will succeed when the request finishes.\n */\nasync function postJSON(url, body, headers, fetchImpl) {\n  headers['Content-Type'] = 'application/json';\n  let response;\n  try {\n    response = await fetchImpl(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    });\n  } catch (e) {\n    // This could be an unhandled error on the backend, or it could be a\n    // network error. There's no way to know, since an unhandled error on the\n    // backend will fail to set the proper CORS header, and thus will be\n    // treated as a network error by fetch.\n    return {\n      status: 0,\n      json: null\n    };\n  }\n  let json = null;\n  try {\n    json = await response.json();\n  } catch (e) {\n    // If we fail to parse JSON, it will fail the same as an empty body.\n  }\n  return {\n    status: response.status,\n    json\n  };\n}\n/**\n * Creates authorization headers for Firebase Functions requests.\n * @param functionsInstance The Firebase Functions service instance.\n * @param options Options for the callable function, including AppCheck token settings.\n * @return A Promise that resolves a headers map to include in outgoing fetch request.\n */\nasync function makeAuthHeaders(functionsInstance, options) {\n  const headers = {};\n  const context = await functionsInstance.contextProvider.getContext(options.limitedUseAppCheckTokens);\n  if (context.authToken) {\n    headers['Authorization'] = 'Bearer ' + context.authToken;\n  }\n  if (context.messagingToken) {\n    headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n  }\n  if (context.appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = context.appCheckToken;\n  }\n  return headers;\n}\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param name The name of the callable trigger.\n * @param data The data to pass as params to the function.\n */\nfunction call(functionsInstance, name, data, options) {\n  const url = functionsInstance._url(name);\n  return callAtURL(functionsInstance, url, data, options);\n}\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param url The url of the callable trigger.\n * @param data The data to pass as params to the function.\n */\nasync function callAtURL(functionsInstance, url, data, options) {\n  // Encode any special types, such as dates, in the input data.\n  data = encode(data);\n  const body = {\n    data\n  };\n  // Add a header for the authToken.\n  const headers = await makeAuthHeaders(functionsInstance, options);\n  // Default timeout to 70s, but let the options override it.\n  const timeout = options.timeout || 70000;\n  const failAfterHandle = failAfter(timeout);\n  const response = await Promise.race([postJSON(url, body, headers, functionsInstance.fetchImpl), failAfterHandle.promise, functionsInstance.cancelAllRequests]);\n  // Always clear the failAfter timeout\n  failAfterHandle.cancel();\n  // If service was deleted, interrupted response throws an error.\n  if (!response) {\n    throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\n  }\n  // Check for an error status, regardless of http status.\n  const error = _errorForResponse(response.status, response.json);\n  if (error) {\n    throw error;\n  }\n  if (!response.json) {\n    throw new FunctionsError('internal', 'Response is not valid JSON object.');\n  }\n  let responseData = response.json.data;\n  // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n  // backwards compatibility.\n  if (typeof responseData === 'undefined') {\n    responseData = response.json.result;\n  }\n  if (typeof responseData === 'undefined') {\n    // Consider the response malformed.\n    throw new FunctionsError('internal', 'Response is missing data field.');\n  }\n  // Decode any special types, such as dates, in the returned data.\n  const decodedData = decode(responseData);\n  return {\n    data: decodedData\n  };\n}\n/**\n * Calls a callable function asynchronously and returns a streaming result.\n * @param name The name of the callable trigger.\n * @param data The data to pass as params to the function.\n * @param options Streaming request options.\n */\nfunction stream(functionsInstance, name, data, options) {\n  const url = functionsInstance._url(name);\n  return streamAtURL(functionsInstance, url, data, options || {});\n}\n/**\n * Calls a callable function asynchronously and return a streaming result.\n * @param url The url of the callable trigger.\n * @param data The data to pass as params to the function.\n * @param options Streaming request options.\n */\nasync function streamAtURL(functionsInstance, url, data, options) {\n  var _a;\n  // Encode any special types, such as dates, in the input data.\n  data = encode(data);\n  const body = {\n    data\n  };\n  //\n  // Add a header for the authToken.\n  const headers = await makeAuthHeaders(functionsInstance, options);\n  headers['Content-Type'] = 'application/json';\n  headers['Accept'] = 'text/event-stream';\n  let response;\n  try {\n    response = await functionsInstance.fetchImpl(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers,\n      signal: options === null || options === void 0 ? void 0 : options.signal\n    });\n  } catch (e) {\n    if (e instanceof Error && e.name === 'AbortError') {\n      const error = new FunctionsError('cancelled', 'Request was cancelled.');\n      return {\n        data: Promise.reject(error),\n        stream: {\n          [Symbol.asyncIterator]() {\n            return {\n              next() {\n                return Promise.reject(error);\n              }\n            };\n          }\n        }\n      };\n    }\n    // This could be an unhandled error on the backend, or it could be a\n    // network error. There's no way to know, since an unhandled error on the\n    // backend will fail to set the proper CORS header, and thus will be\n    // treated as a network error by fetch.\n    const error = _errorForResponse(0, null);\n    return {\n      data: Promise.reject(error),\n      // Return an empty async iterator\n      stream: {\n        [Symbol.asyncIterator]() {\n          return {\n            next() {\n              return Promise.reject(error);\n            }\n          };\n        }\n      }\n    };\n  }\n  let resultResolver;\n  let resultRejecter;\n  const resultPromise = new Promise((resolve, reject) => {\n    resultResolver = resolve;\n    resultRejecter = reject;\n  });\n  (_a = options === null || options === void 0 ? void 0 : options.signal) === null || _a === void 0 ? void 0 : _a.addEventListener('abort', () => {\n    const error = new FunctionsError('cancelled', 'Request was cancelled.');\n    resultRejecter(error);\n  });\n  const reader = response.body.getReader();\n  const rstream = createResponseStream(reader, resultResolver, resultRejecter, options === null || options === void 0 ? void 0 : options.signal);\n  return {\n    stream: {\n      [Symbol.asyncIterator]() {\n        const rreader = rstream.getReader();\n        return {\n          async next() {\n            const {\n              value,\n              done\n            } = await rreader.read();\n            return {\n              value: value,\n              done\n            };\n          },\n          async return() {\n            await rreader.cancel();\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n        };\n      }\n    },\n    data: resultPromise\n  };\n}\n/**\n * Creates a ReadableStream that processes a streaming response from a streaming\n * callable function that returns data in server-sent event format.\n *\n * @param reader The underlying reader providing raw response data\n * @param resultResolver Callback to resolve the final result when received\n * @param resultRejecter Callback to reject with an error if encountered\n * @param signal Optional AbortSignal to cancel the stream processing\n * @returns A ReadableStream that emits decoded messages from the response\n *\n * The returned ReadableStream:\n *   1. Emits individual messages when \"message\" data is received\n *   2. Resolves with the final result when a \"result\" message is received\n *   3. Rejects with an error if an \"error\" message is received\n */\nfunction createResponseStream(reader, resultResolver, resultRejecter, signal) {\n  const processLine = (line, controller) => {\n    const match = line.match(responseLineRE);\n    // ignore all other lines (newline, comments, etc.)\n    if (!match) {\n      return;\n    }\n    const data = match[1];\n    try {\n      const jsonData = JSON.parse(data);\n      if ('result' in jsonData) {\n        resultResolver(decode(jsonData.result));\n        return;\n      }\n      if ('message' in jsonData) {\n        controller.enqueue(decode(jsonData.message));\n        return;\n      }\n      if ('error' in jsonData) {\n        const error = _errorForResponse(0, jsonData);\n        controller.error(error);\n        resultRejecter(error);\n        return;\n      }\n    } catch (error) {\n      if (error instanceof FunctionsError) {\n        controller.error(error);\n        resultRejecter(error);\n        return;\n      }\n      // ignore other parsing errors\n    }\n  };\n  const decoder = new TextDecoder();\n  return new ReadableStream({\n    start(controller) {\n      let currentText = '';\n      return pump();\n      async function pump() {\n        if (signal === null || signal === void 0 ? void 0 : signal.aborted) {\n          const error = new FunctionsError('cancelled', 'Request was cancelled');\n          controller.error(error);\n          resultRejecter(error);\n          return Promise.resolve();\n        }\n        try {\n          const {\n            value,\n            done\n          } = await reader.read();\n          if (done) {\n            if (currentText.trim()) {\n              processLine(currentText.trim(), controller);\n            }\n            controller.close();\n            return;\n          }\n          if (signal === null || signal === void 0 ? void 0 : signal.aborted) {\n            const error = new FunctionsError('cancelled', 'Request was cancelled');\n            controller.error(error);\n            resultRejecter(error);\n            await reader.cancel();\n            return;\n          }\n          currentText += decoder.decode(value, {\n            stream: true\n          });\n          const lines = currentText.split('\\n');\n          currentText = lines.pop() || '';\n          for (const line of lines) {\n            if (line.trim()) {\n              processLine(line.trim(), controller);\n            }\n          }\n          return pump();\n        } catch (error) {\n          const functionsError = error instanceof FunctionsError ? error : _errorForResponse(0, null);\n          controller.error(functionsError);\n          resultRejecter(functionsError);\n        }\n      }\n    },\n    cancel() {\n      return reader.cancel();\n    }\n  });\n}\nconst name = \"@firebase/functions\";\nconst version = \"0.12.3\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst AUTH_INTERNAL_NAME = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\nfunction registerFunctions(variant) {\n  const factory = (container, {\n    instanceIdentifier: regionOrCustomDomain\n  }) => {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain);\n  };\n  _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a {@link Functions} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param regionOrCustomDomain - one of:\n *   a) The region the callable functions are located in (ex: us-central1)\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\n * @public\n */\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\n  // Dependencies\n  const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('functions');\n  if (emulator) {\n    connectFunctionsEmulator(functionsInstance, ...emulator);\n  }\n  return functionsInstance;\n}\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @public\n */\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\n  connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\n}\n/**\n * Returns a reference to the callable HTTPS trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nfunction httpsCallable(functionsInstance, name, options) {\n  return httpsCallable$1(getModularInstance(functionsInstance), name, options);\n}\n/**\n * Returns a reference to the callable HTTPS trigger with the specified url.\n * @param url - The url of the trigger.\n * @public\n */\nfunction httpsCallableFromURL(functionsInstance, url, options) {\n  return httpsCallableFromURL$1(getModularInstance(functionsInstance), url, options);\n}\n\n/**\n * Cloud Functions for Firebase\n *\n * @packageDocumentation\n */\nregisterFunctions();\nexport { FunctionsError, connectFunctionsEmulator, getFunctions, httpsCallable, httpsCallableFromURL };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { httpsCallable as httpsCallable$1 } from 'rxfire/functions';\nimport { connectFunctionsEmulator as connectFunctionsEmulator$1, getFunctions as getFunctions$1, httpsCallable as httpsCallable$2, httpsCallableFromURL as httpsCallableFromURL$1 } from 'firebase/functions';\nexport * from 'firebase/functions';\nclass Functions {\n  constructor(functions) {\n    return functions;\n  }\n}\nconst FUNCTIONS_PROVIDER_NAME = 'functions';\nclass FunctionsInstances {\n  constructor() {\n    return _getAllInstancesOf(FUNCTIONS_PROVIDER_NAME);\n  }\n}\nconst functionInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe(/*#__PURE__*/concatMap(() => from(_getAllInstancesOf(FUNCTIONS_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_FUNCTIONS_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.functions-instances');\nfunction defaultFunctionsInstanceFactory(provided, defaultApp) {\n  const defaultAuth = _getDefaultInstanceOf(FUNCTIONS_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Functions(defaultAuth);\n}\nfunction functionsInstanceFactory(fn) {\n  return (zone, injector) => {\n    const functions = zone.runOutsideAngular(() => fn(injector));\n    return new Functions(functions);\n  };\n}\nconst FUNCTIONS_INSTANCES_PROVIDER = {\n  provide: FunctionsInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_FUNCTIONS_INSTANCES]]\n};\nconst DEFAULT_FUNCTIONS_INSTANCE_PROVIDER = {\n  provide: Functions,\n  useFactory: defaultFunctionsInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_FUNCTIONS_INSTANCES], FirebaseApp]\n};\nlet FunctionsModule = /*#__PURE__*/(() => {\n  class FunctionsModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'fn');\n    }\n    static ɵfac = function FunctionsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FunctionsModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: FunctionsModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [DEFAULT_FUNCTIONS_INSTANCE_PROVIDER, FUNCTIONS_INSTANCES_PROVIDER]\n    });\n  }\n  return FunctionsModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideFunctions(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'fn');\n  return makeEnvironmentProviders([DEFAULT_FUNCTIONS_INSTANCE_PROVIDER, FUNCTIONS_INSTANCES_PROVIDER, {\n    provide: PROVIDED_FUNCTIONS_INSTANCES,\n    useFactory: functionsInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps,\n    // Defensively load Auth first, if provided\n    [new Optional(), AuthInstances], [new Optional(), AppCheckInstances], ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst httpsCallableData = /*#__PURE__*/_zoneWrap(httpsCallable$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectFunctionsEmulator = /*#__PURE__*/_zoneWrap(connectFunctionsEmulator$1, true);\nconst getFunctions = /*#__PURE__*/_zoneWrap(getFunctions$1, true);\nconst httpsCallable = /*#__PURE__*/_zoneWrap(httpsCallable$2, true);\nconst httpsCallableFromURL = /*#__PURE__*/_zoneWrap(httpsCallableFromURL$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Functions, FunctionsInstances, FunctionsModule, connectFunctionsEmulator, functionInstance$, getFunctions, httpsCallable, httpsCallableData, httpsCallableFromURL, provideFunctions };\n"],"mappings":"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","names":["LONG_TYPE","UNSIGNED_LONG_TYPE","mapValues","o","f","result","key","encode","data","x","decode","json","value","FUNCTIONS_TYPE","errorCodeMap","FunctionsError","_FunctionsError","FirebaseError","code","message","details","codeForHTTPStatus","status","_errorForResponse","bodyJSON","description","errorJSON","ContextProvider","app","authProvider","messagingProvider","appCheckProvider","_isFirebaseServerApp","auth","messaging","appCheck","__async","token","limitedUseAppCheckTokens","authToken","messagingToken","appCheckToken","DEFAULT_REGION","responseLineRE","failAfter","millis","timer","_","reject","FunctionsService","regionOrCustomDomain","fetchImpl","args","resolve","url","name","projectId","connectFunctionsEmulator$1","functionsInstance","host","port","httpsCallable$1","options","callable","call","stream","postJSON","url","body","headers","fetchImpl","__async","response","json","makeAuthHeaders","functionsInstance","options","context","call","name","data","callAtURL","encode","timeout","failAfterHandle","failAfter","FunctionsError","error","_errorForResponse","responseData","decode","stream","streamAtURL","_a","e","resultResolver","resultRejecter","resultPromise","resolve","reject","reader","rstream","createResponseStream","rreader","value","done","signal","processLine","line","controller","match","responseLineRE","jsonData","decoder","currentText","pump","lines","functionsError","version","AUTH_INTERNAL_NAME","APP_CHECK_INTERNAL_NAME","MESSAGING_INTERNAL_NAME","registerFunctions","variant","factory","container","regionOrCustomDomain","app","authProvider","messagingProvider","appCheckProvider","FunctionsService","_registerComponent","Component","FUNCTIONS_TYPE","registerVersion","getFunctions","getApp","DEFAULT_REGION","_getProvider","getModularInstance","emulator","getDefaultEmulatorHostnameAndPort","connectFunctionsEmulator","host","port","connectFunctionsEmulator$1","httpsCallable","httpsCallable$1","registerFunctions","getFunctions","ɵzoneWrap","httpsCallable"],"x_google_ignoreList":[0,1]}