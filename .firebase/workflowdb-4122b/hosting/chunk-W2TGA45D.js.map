{
  "version": 3,
  "sources": ["src/app/functionalities/worker-completetask/worker-completetask.component.ts", "src/app/functionalities/worker-completetask/worker-completetask.component.html"],
  "sourcesContent": ["import { Component, OnInit, OnDestroy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { \n  Firestore, \n  collection, \n  query, \n  where, \n  getDocs, \n  collectionData,\n  doc,\n  getDoc\n} from '@angular/fire/firestore';\nimport { Auth } from '@angular/fire/auth';\nimport { FormsModule } from '@angular/forms';\nimport { PdfViewerModule } from 'ng2-pdf-viewer';\nimport { Subscription, BehaviorSubject, from, Observable, of } from 'rxjs';\nimport { map, catchError, tap, switchMap } from 'rxjs/operators';\nimport { Reporte, Usuario, Empresa, Departamento } from '../../models/interfaces';\nimport { TaskService } from '../../services/task.service';\nimport { getStorage, ref, getDownloadURL } from '@angular/fire/storage';\n\n@Component({\n  selector: 'app-worker-completetask',\n  standalone: true,\n  imports: [CommonModule, FormsModule, PdfViewerModule],\n  templateUrl: './worker-completetask.component.html',\n  styleUrl: './worker-completetask.component.scss'\n})\nexport class WorkerCompleteTaskComponent implements OnInit, OnDestroy {\n  // Inyección de servicios\n  private firestore: Firestore = inject(Firestore);\n  private auth: Auth = inject(Auth);\n  private router: Router = inject(Router);\n  private taskService: TaskService = inject(TaskService);\n  private sanitizer: DomSanitizer = inject(DomSanitizer);\n\n  // Estados del componente\n  completedTasks: Reporte[] = [];\n  filteredTasks: Reporte[] = [];\n  currentUser: Usuario | null = null;\n  isLoading: boolean = true;\n  errorMessage: string = '';\n  successMessage: string = '';\n  \n  // Para el visor de PDF\n  showPdfViewer: boolean = false;\n  pdfUrl: SafeUrl | null = null;\n  selectedReport: Reporte | null = null;\n  \n  // Para almacenar suscripciones y liberarlas en el destroy\n  private subscriptions: Subscription[] = [];\n  \n  // Filtros\n  empresas: Empresa[] = [];\n  departamentos: Departamento[] = []; // Lista de departamentos para mapear IDs a nombres\n  selectedEmpresa: string = 'Todas las empresas';\n  selectedFecha: string = 'Todas las fechas';\n  selectedPrioridad: string = 'Todas las prioridades';\n  selectedDepartamento: string = 'Todos los departamentos'; // Nuevo filtro para departamentos\n  searchQuery: string = '';\n  \n  // Fechas disponibles para filtrado\n  fechasDisponibles: string[] = ['Todas las fechas', 'Hoy', 'Esta semana', 'Este mes'];\n  \n  // Prioridades disponibles para filtrado\n  prioridadesDisponibles: string[] = ['Todas las prioridades', 'Alta', 'Media', 'Baja'];\n\n  // Departamentos disponibles para filtrado\n  departamentosDisponibles: string[] = ['Todos los departamentos'];\n  \n  ngOnInit(): void {\n    this.setupAuthListener();\n    this.loadEmpresas();\n    this.loadDepartamentos(); // Cargar departamentos al iniciar\n  }\n  \n  ngOnDestroy(): void {\n    // Desuscribir para evitar memory leaks\n    this.subscriptions.forEach(sub => {\n      if (sub) sub.unsubscribe();\n    });\n    \n    // Liberar recursos URL\n    if (this.pdfUrl) {\n      this.revokeObjectURL(this.pdfUrl);\n    }\n  }\n  \n  // Cargar departamentos para el filtro\n  loadDepartamentos(): void {\n    const deptosRef = collection(this.firestore, 'Departamento');\n    const subscription = collectionData(deptosRef, { idField: 'IdDepartamento' }).pipe(\n      map((departamentos: any[]) => {\n        this.departamentos = departamentos;\n        this.departamentosDisponibles = ['Todos los departamentos', ...departamentos.map(d => d.Nombre)];\n        console.log('Departamentos cargados:', this.departamentos);\n      }),\n      catchError(error => {\n        console.error('Error al cargar departamentos:', error);\n        return of(null);\n      })\n    ).subscribe();\n    \n    this.subscriptions.push(subscription);\n  }\n  \n  // Cargar empresas para el filtro\n  loadEmpresas(): void {\n    const empresasRef = collection(this.firestore, 'Empresa');\n    const subscription = collectionData(empresasRef, { idField: 'IdEmpresa' }).pipe(\n      map((empresas: any[]) => {\n        this.empresas = empresas;\n        console.log('Empresas cargadas:', this.empresas);\n      }),\n      catchError(error => {\n        console.error('Error al cargar empresas:', error);\n        return of(null);\n      })\n    ).subscribe();\n    \n    this.subscriptions.push(subscription);\n  }\n  \n  // Revocar URL para liberar memoria\n  private revokeObjectURL(safeUrl: SafeUrl): void {\n    try {\n      const urlStr = safeUrl.toString();\n      const match = urlStr.match(/blob:http[^\"']+/);\n      if (match && match[0]) {\n        URL.revokeObjectURL(match[0]);\n      }\n    } catch (error) {\n      console.error('Error al revocar URL:', error);\n    }\n  }\n  \n  private setupAuthListener(): void {\n    const authSub = this.auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        console.log('Usuario autenticado:', user.email);\n        try {\n          await this.loadUserData(user.uid);\n        } catch (error) {\n          console.error('Error en la inicialización:', error);\n          this.errorMessage = 'Error al cargar los datos del usuario';\n        }\n      } else {\n        console.log('No hay usuario autenticado');\n        this.router.navigate(['/login']);\n      }\n    });\n    \n    if (authSub) {\n      this.subscriptions.push(new Subscription(() => authSub()));\n    }\n  }\n  \n  private async loadUserData(userId: string): Promise<void> {\n    try {\n      console.log('Cargando datos del usuario:', userId);\n      const userDoc = await getDoc(doc(this.firestore, 'Usuario', userId));\n      \n      if (userDoc.exists()) {\n        this.currentUser = {\n          ...userDoc.data() as Usuario,\n          IdUsuario: userId\n        };\n        \n        console.log('Datos de usuario cargados:', this.currentUser);\n        \n        if (this.currentUser.IdUsuario) {\n          this.loadCompletedReportes(this.currentUser.IdUsuario);\n        } else {\n          throw new Error('Usuario sin ID válido');\n        }\n      } else {\n        throw new Error('No se encontró el documento del usuario');\n      }\n    } catch (error) {\n      console.error('Error al cargar datos del usuario:', error);\n      this.errorMessage = 'Error al cargar los datos del usuario';\n      this.isLoading = false;\n    }\n  }\n  \n  // Cargar reportes completados\n  private loadCompletedReportes(userId: string): void {\n    this.isLoading = true;\n    this.errorMessage = '';\n    \n    // Usar el servicio de tareas para obtener reportes completados\n    const subscription = this.taskService.getCompletedReportesByWorker(userId).pipe(\n      tap(reportes => {\n        console.log('Reportes completados recibidos:', reportes);\n        this.completedTasks = reportes;\n        this.applyFilters(); // Aplicar filtros iniciales\n        this.isLoading = false;\n      }),\n      catchError(error => {\n        console.error('Error al cargar reportes completados:', error);\n        this.errorMessage = 'Error al cargar los reportes completados';\n        this.isLoading = false;\n        return from([]);\n      })\n    ).subscribe();\n    \n    this.subscriptions.push(subscription);\n  }\n  \n  // Método para obtener el nombre del departamento a partir del ID\n  getDepartamentoName(departamentoId: string): string {\n    const departamento = this.departamentos.find(d => d.IdDepartamento === departamentoId);\n    return departamento ? departamento.Nombre : 'Departamento desconocido';\n  }\n  \n  // Método para aplicar todos los filtros\n  applyFilters(): void {\n    let filteredResults = [...this.completedTasks];\n    \n    // Filtrar por empresa\n    if (this.selectedEmpresa && this.selectedEmpresa !== 'Todas las empresas') {\n      filteredResults = filteredResults.filter(task => \n        task.IdEmpresa === this.selectedEmpresa\n      );\n    }\n    \n    // Filtrar por fecha\n    if (this.selectedFecha && this.selectedFecha !== 'Todas las fechas') {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const weekStart = new Date(today);\n      weekStart.setDate(today.getDate() - today.getDay()); // Domingo de esta semana\n      \n      const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);\n      \n      filteredResults = filteredResults.filter(task => {\n        const taskDate = task.fechaCompletado ? new Date(task.fechaCompletado) : new Date(task.fecha);\n        taskDate.setHours(0, 0, 0, 0);\n        \n        if (this.selectedFecha === 'Hoy') {\n          return taskDate.getTime() === today.getTime();\n        } else if (this.selectedFecha === 'Esta semana') {\n          return taskDate >= weekStart;\n        } else if (this.selectedFecha === 'Este mes') {\n          return taskDate >= monthStart;\n        }\n        return true;\n      });\n    }\n    \n    // Filtrar por prioridad\n    if (this.selectedPrioridad && this.selectedPrioridad !== 'Todas las prioridades') {\n      filteredResults = filteredResults.filter(task => \n        task.priority === this.selectedPrioridad\n      );\n    }\n    \n    // Filtrar por departamento (usando el ID pero mostrando el nombre)\n    if (this.selectedDepartamento && this.selectedDepartamento !== 'Todos los departamentos') {\n      const selectedDept = this.departamentos.find(d => d.Nombre === this.selectedDepartamento);\n      if (selectedDept) {\n        filteredResults = filteredResults.filter(task => \n          task.departamento === selectedDept.IdDepartamento\n        );\n      }\n    }\n    \n    // Filtrar por búsqueda\n    if (this.searchQuery.trim()) {\n      const query = this.searchQuery.toLowerCase().trim();\n      filteredResults = filteredResults.filter(task => \n        (task.Tipo_Trabajo && task.Tipo_Trabajo.toLowerCase().includes(query)) ||\n        (task.jobDescription && task.jobDescription.toLowerCase().includes(query)) ||\n        (task.descripcionCompletado && task.descripcionCompletado.toLowerCase().includes(query)) ||\n        (task.location && task.location.toLowerCase().includes(query)) ||\n        (task.departamento && this.getDepartamentoName(task.departamento).toLowerCase().includes(query))\n      );\n    }\n    \n    this.filteredTasks = filteredResults;\n  }\n  \n  // Métodos para actualizar filtros\n  updateEmpresaFilter(empresa: string): void {\n    this.selectedEmpresa = empresa;\n    this.applyFilters();\n  }\n  \n  updateFechaFilter(fecha: string): void {\n    this.selectedFecha = fecha;\n    this.applyFilters();\n  }\n  \n  updatePrioridadFilter(prioridad: string): void {\n    this.selectedPrioridad = prioridad;\n    this.applyFilters();\n  }\n  \n  updateDepartamentoFilter(departamento: string): void {\n    this.selectedDepartamento = departamento;\n    this.applyFilters();\n  }\n  \n  updateSearchQuery(query: string): void {\n    this.searchQuery = query;\n    this.applyFilters();\n  }\n  \n  clearFilters(): void {\n    this.selectedEmpresa = 'Todas las empresas';\n    this.selectedFecha = 'Todas las fechas';\n    this.selectedPrioridad = 'Todas las prioridades';\n    this.selectedDepartamento = 'Todos los departamentos';\n    this.searchQuery = '';\n    this.applyFilters();\n  }\n  \n  // Método para volver atrás\n  goBack(event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n    this.router.navigate(['/worker']);\n  }\n  \n  // Formatear fecha para mostrar\n  formatDate(date: any): string {\n    if (!date) return 'Fecha no disponible';\n    \n    try {\n      // Si es un timestamp de Firestore\n      if (date && typeof date === 'object' && 'seconds' in date) {\n        date = new Date(date.seconds * 1000);\n      }\n      // Si es una string o un objeto Date\n      const dateObj = date instanceof Date ? date : new Date(date);\n      \n      return dateObj.toLocaleDateString('es-ES', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    } catch (error) {\n      console.error('Error al formatear fecha:', error);\n      return 'Fecha inválida';\n    }\n  }\n  \n  private getSafeUrl(url: string): SafeUrl {\n    try {\n      return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    } catch (error) {\n      console.error('Error al sanitizar URL:', error);\n      return '';\n    }\n  }\n  \n  // Determinar clase CSS según el estado\n  getStatusClass(status: string): string {\n    switch (status?.toLowerCase()) {\n      case 'completado':\n        return 'completed';\n      case 'pendiente':\n        return 'pending';\n      default:\n        return 'default';\n    }\n  }\n  \n  // Determinar clase CSS según la prioridad\n  getPriorityClass(priority: string): string {\n    switch (priority?.toLowerCase()) {\n      case 'alta':\n        return 'high';\n      case 'media':\n        return 'medium';\n      case 'baja':\n        return 'low';\n      default:\n        return 'default';\n    }\n  }\n  \n  // Obtener nombre de empresa\n  getEmpresaName(empresaId: string): string {\n    const empresa = this.empresas.find(e => e.IdEmpresa === empresaId);\n    return empresa ? empresa.Nombre : 'Empresa';\n  }\n  \n  // Abrir visor de PDF\n  openPdfViewer(report: Reporte, event?: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    \n    this.isLoading = true;\n    this.selectedReport = report;\n    this.showPdfViewer = true;\n    \n    // Primero intentar obtener el PDF desde la URL almacenada\n    if (report.pdfUrl) {\n      try {\n        // Usar bypassSecurityTrustResourceUrl para permitir la carga del PDF\n        this.pdfUrl = this.sanitizer.bypassSecurityTrustResourceUrl(report.pdfUrl);\n        console.log('PDF cargado desde URL guardada:', report.pdfUrl);\n        this.isLoading = false;\n      } catch (error) {\n        console.error('Error al cargar URL del PDF:', error);\n        this.loadPdfFromStorage(report);\n      }\n    } else {\n      // Si no hay URL directa, intentar cargar desde Storage\n      this.loadPdfFromStorage(report);\n    }\n  }\n  \n  // Cargar PDF desde Firebase Storage\n  private async loadPdfFromStorage(report: Reporte): Promise<void> {\n    if (!report.IdReporte) {\n      this.errorMessage = 'ID de reporte no disponible';\n      this.closePdfViewer();\n      return;\n    }\n    \n    try {\n      console.log('Intentando cargar PDF desde Storage para reporte:', report.IdReporte);\n      \n      const storage = getStorage();\n      // Construir path al PDF basado en la estructura de carpetas\n      const pdfPath = `reportes_pdf/${report.IdReporte}.pdf`;\n      const pdfRef = ref(storage, pdfPath);\n      \n      console.log('Ruta del PDF en Storage:', pdfPath);\n      \n      // Obtener URL de descarga\n      const downloadURL = await getDownloadURL(pdfRef);\n      console.log('URL de descarga obtenida:', downloadURL);\n      \n      // Usar iframe directo con URL externa en lugar de objeto blob\n      this.pdfUrl = this.sanitizer.bypassSecurityTrustResourceUrl(downloadURL);\n      \n      // Si no tenemos la URL almacenada, actualizar el documento\n      if (!report.pdfUrl) {\n        try {\n          await this.taskService.updateReporteWithPdfInfo(report.IdReporte, downloadURL);\n          console.log('URL de PDF actualizada en el reporte');\n        } catch (updateError) {\n          console.error('Error al actualizar URL de PDF en el reporte:', updateError);\n        }\n      }\n    } catch (error) {\n      console.error('Error al cargar PDF desde Storage:', error);\n      \n      // Si falla la carga desde Storage, intentar obtener el PDF desde la URL guardada en Firestore\n      if (report.pdfUrl) {\n        console.log('Intentando usar URL guardada en el reporte:', report.pdfUrl);\n        this.pdfUrl = this.sanitizer.bypassSecurityTrustResourceUrl(report.pdfUrl);\n      } else {\n        this.errorMessage = 'No se pudo cargar el PDF. El archivo podría no existir.';\n        setTimeout(() => this.errorMessage = '', 5000);\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  \n  // Cerrar visor de PDF\n  closePdfViewer(event?: Event): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    \n    if (this.pdfUrl) {\n      this.revokeObjectURL(this.pdfUrl);\n      this.pdfUrl = null;\n    }\n    this.showPdfViewer = false;\n    this.selectedReport = null;\n  }\n  \n  // Iniciar descarga de PDF\n  async startDownload(report: Reporte, event?: Event): Promise<void> {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    \n    if (!report || !report.IdReporte) {\n      this.errorMessage = 'ID de reporte no disponible';\n      return;\n    }\n    \n    try {\n      this.isLoading = true;\n      \n      let downloadURL = '';\n      \n      // Primero intentar usar la URL guardada en el reporte\n      if (report.pdfUrl) {\n        downloadURL = report.pdfUrl;\n        console.log('Usando URL existente para descarga:', downloadURL);\n      } else {\n        // Si no hay URL guardada, obtenerla de Firebase Storage\n        const storage = getStorage();\n        const pdfPath = `reportes_pdf/${report.IdReporte}.pdf`;\n        const pdfRef = ref(storage, pdfPath);\n        \n        downloadURL = await getDownloadURL(pdfRef);\n        console.log('URL obtenida de Storage para descarga:', downloadURL);\n      }\n      \n      // Abrir en nueva pestaña en lugar de usar elemento 'a'\n      window.open(downloadURL, '_blank');\n      \n      this.successMessage = 'Descarga iniciada correctamente';\n      setTimeout(() => this.successMessage = '', 3000);\n    } catch (error) {\n      console.error('Error al descargar PDF:', error);\n      this.errorMessage = 'Error al descargar el PDF';\n      setTimeout(() => this.errorMessage = '', 5000);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  \n  private createSafePdfLink(url: string, fileName: string): HTMLAnchorElement {\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fileName;\n    link.target = '_blank'; // Esto evita que la página actual se recargue\n    link.rel = 'noopener noreferrer'; // Buena práctica de seguridad\n    return link;\n  }\n  \n  private preventDefaultAndExecute(event: Event | undefined, callback: Function): void {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    callback();\n  }\n  \n  // Verificar si el reporte tiene imágenes\n  hasImages(report: Reporte): boolean {\n    return report.evidenceImages && Array.isArray(report.evidenceImages) && report.evidenceImages.length > 0;\n  }\n  \n  // Obtener conteo de imágenes\n  getImageCount(report: Reporte): number {\n    return report.evidenceImages && Array.isArray(report.evidenceImages) ? report.evidenceImages.length : 0;\n  }\n}", "<div class=\"tasks-container\">\n  <button type=\"button\" class=\"btn-back\" (click)=\"goBack()\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n      <line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\"></line>\n      <polyline points=\"12 19 5 12 12 5\"></polyline>\n    </svg>\n    Volver\n  </button>\n  \n  <h2>Reportes Completados</h2>\n  \n  <!-- Mensajes de estado -->\n  @if (errorMessage) {\n    <div class=\"alert alert-error\">\n      <svg class=\"alert-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\n        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n      </svg>\n      {{ errorMessage }}\n    </div>\n  }\n  \n  @if (successMessage) {\n    <div class=\"alert alert-success\">\n      <svg class=\"alert-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n        <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n      </svg>\n      {{ successMessage }}\n    </div>\n  }\n  \n  <!-- Estado de carga -->\n  @if (isLoading) {\n    <div class=\"loading-state\">\n      <div class=\"spinner\"></div>\n      <p>Cargando reportes completados...</p>\n    </div>\n  }\n  \n  <!-- Sistema de búsqueda y filtros -->\n  <div class=\"search-filters-container\">\n    <!-- Barra de búsqueda -->\n    <div class=\"search-bar\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n        <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n      </svg>\n      <input \n        type=\"text\" \n        placeholder=\"Buscar por título, descripción...\" \n        [(ngModel)]=\"searchQuery\"\n        (input)=\"applyFilters()\"\n      >\n    </div>\n    \n    <!-- Filtros -->\n    <div class=\"filters-row\">\n      <div class=\"filter-group\">\n        <div class=\"filter-label\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\n            <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n          </svg>\n          Empresa\n        </div>\n        <select [(ngModel)]=\"selectedEmpresa\" (change)=\"applyFilters()\">\n          <option value=\"Todas las empresas\">Todas las empresas</option>\n          @for (empresa of empresas; track empresa.IdEmpresa) {\n            <option [value]=\"empresa.IdEmpresa\">{{ empresa.Nombre }}</option>\n          }\n        </select>\n      </div>\n      \n      <div class=\"filter-group\">\n        <div class=\"filter-label\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n            <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n            <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n            <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n          </svg>\n          Fecha de completado\n        </div>\n        <select [(ngModel)]=\"selectedFecha\" (change)=\"applyFilters()\">\n          @for (fecha of fechasDisponibles; track fecha) {\n            <option [value]=\"fecha\">{{ fecha }}</option>\n          }\n        </select>\n      </div>\n      \n      <div class=\"filter-group\">\n        <div class=\"filter-label\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\n            <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\n            <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n          </svg>\n          Prioridad\n        </div>\n        <select [(ngModel)]=\"selectedPrioridad\" (change)=\"applyFilters()\">\n          @for (prioridad of prioridadesDisponibles; track prioridad) {\n            <option [value]=\"prioridad\">{{ prioridad }}</option>\n          }\n        </select>\n      </div>\n      \n      <button class=\"btn-clear-filters\" (click)=\"clearFilters()\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n          <line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n        </svg>\n        Limpiar filtros\n      </button>\n    </div>\n  </div>\n  \n  <!-- Sin reportes -->\n  @if (!isLoading && filteredTasks.length === 0) {\n    <div class=\"no-tasks\">\n      <div class=\"empty-state\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n          <path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path>\n          <line x1=\"12\" y1=\"11\" x2=\"12\" y2=\"17\"></line>\n          <line x1=\"9\" y1=\"14\" x2=\"15\" y2=\"14\"></line>\n        </svg>\n        <p>No hay reportes completados que coincidan con los filtros.</p>\n      </div>\n    </div>\n  }\n  \n  <!-- Lista de reportes completados -->\n  @if (!isLoading && filteredTasks.length > 0) {\n    <div class=\"tasks-grid\">\n      @for (task of filteredTasks; track task.IdReporte) {\n        <div class=\"task-card\">\n          <div class=\"task-header\">\n            <h3>{{ task.Tipo_Trabajo }}</h3>\n            <div class=\"task-tags\">\n              <span class=\"status-badge\" [class]=\"getStatusClass(task.estado)\">\n                {{ task.estado }}\n              </span>\n              \n              @if (task.priority) {\n                <span class=\"priority-badge\" [class]=\"getPriorityClass(task.priority)\">\n                  {{ task.priority }}\n                </span>\n              }\n              \n              <!-- Badge para disponibilidad de PDF con tooltip -->\n              @if (task.pdfUrl || task.reporteGenerado) {\n                <span class=\"pdf-badge\" title=\"PDF disponible\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                    <polyline points=\"14 2 14 8 20 8\"></polyline>\n                  </svg>\n                  PDF\n                </span>\n              }\n              \n              <!-- Badge para evidencias fotográficas -->\n              @if (hasImages(task)) {\n                <span class=\"evidence-badge\" title=\"Contiene evidencias fotográficas\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                    <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"></circle>\n                    <polyline points=\"21 15 16 10 5 21\"></polyline>\n                  </svg>\n                  Fotos ({{ getImageCount(task) }})\n                </span>\n              }\n            </div>\n          </div>\n          \n          <div class=\"task-content\">\n            <!-- Fecha de completado y empresa -->\n            <div class=\"task-meta\">\n              <div class=\"task-date\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n                  <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\n                  <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\n                  <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\n                </svg>\n                Completado: {{ formatDate(task.fechaCompletado || task.fecha) }}\n              </div>\n              \n              <div class=\"task-company\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\n                  <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n                </svg>\n                {{ getEmpresaName(task.IdEmpresa) }}\n              </div>\n            </div>\n            \n            <!-- Ubicación -->\n            @if (task.location) {\n              <div class=\"task-location\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\n                  <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\n                </svg>\n                {{ task.location }}\n              </div>\n            }\n            \n            <!-- Departamento -->\n            @if (task.departamento) {\n              <div class=\"task-department\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                  <rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect>\n                  <rect x=\"9\" y=\"9\" width=\"6\" height=\"6\"></rect>\n                  <line x1=\"9\" y1=\"1\" x2=\"9\" y2=\"4\"></line>\n                  <line x1=\"15\" y1=\"1\" x2=\"15\" y2=\"4\"></line>\n                  <line x1=\"9\" y1=\"20\" x2=\"9\" y2=\"23\"></line>\n                  <line x1=\"15\" y1=\"20\" x2=\"15\" y2=\"23\"></line>\n                  <line x1=\"20\" y1=\"9\" x2=\"23\" y2=\"9\"></line>\n                  <line x1=\"20\" y1=\"14\" x2=\"23\" y2=\"14\"></line>\n                  <line x1=\"1\" y1=\"9\" x2=\"4\" y2=\"9\"></line>\n                  <line x1=\"1\" y1=\"14\" x2=\"4\" y2=\"14\"></line>\n                </svg>\n                {{ getDepartamentoName(task.departamento) }}\n              </div>\n            }\n            \n            <!-- Descripción del problema -->\n            <div class=\"task-description\">\n              <h4>Descripción del problema:</h4>\n              <p>{{ task.jobDescription }}</p>\n            </div>\n            \n            <!-- Solución aplicada -->\n            @if (task.descripcionCompletado) {\n              <div class=\"task-solution\">\n                <h4>Solución aplicada:</h4>\n                <p>{{ task.descripcionCompletado }}</p>\n              </div>\n            }\n            \n            <!-- Materiales utilizados -->\n            @if (task.materialesUtilizados) {\n              <div class=\"task-materials\">\n                <h4>Materiales utilizados:</h4>\n                <p>{{ task.materialesUtilizados }}</p>\n              </div>\n            }\n            \n            <!-- Evidencias incluidas -->\n            @if (hasImages(task)) {\n              <div class=\"task-evidence\">\n                <h4>Evidencias incluidas:</h4>\n                <div class=\"evidence-images\">\n                  @for (img of task.evidenceImages; track $index) {\n                    @if ($index < 1) {\n                      <div class=\"evidence-image\">\n                        <img [src]=\"img\" alt=\"Evidencia {{ $index + 1 }}\">\n                      </div>\n                    }\n                  }\n                </div>\n              </div>\n            }\n            \n            <!-- Indicadores de firma y materiales -->\n            <div class=\"task-indicators\">\n              @if (task.firmaDigital) {\n                <div class=\"indicator\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\"></path>\n                    <path d=\"M8 11.5L11 14.5L16 9.5\"></path>\n                  </svg>\n                  <span>Incluye firma digital</span>\n                </div>\n              }\n              \n              @if (task.materialesUtilizados) {\n                <div class=\"indicator\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <rect x=\"2\" y=\"7\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\n                    <path d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"></path>\n                  </svg>\n                  <span>Materiales detallados</span>\n                </div>\n              }\n            </div>\n            \n            <!-- Botones para ver y descargar PDF -->\n           \n          </div>\n        </div>\n      }\n    </div>\n  }\n  \n  <!-- Modal para visor de PDF mejorado -->\n  @if (showPdfViewer) {\n    <div class=\"pdf-modal-overlay\" (click)=\"closePdfViewer($event)\">\n      <div class=\"pdf-modal\" (click)=\"$event.stopPropagation()\">\n        <div class=\"modal-header\">\n          <h3>{{ selectedReport?.Tipo_Trabajo }}</h3>\n          <button type=\"button\" class=\"btn-close\" (click)=\"closePdfViewer($event)\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"modal-body\">\n          @if (pdfUrl) {\n            <iframe [src]=\"pdfUrl\" class=\"responsive-iframe\" frameborder=\"0\" allowfullscreen></iframe>\n          } @else {\n            <div class=\"pdf-loading\">\n              <div class=\"spinner\"></div>\n              <p>Cargando PDF...</p>\n            </div>\n          }\n        </div>\n        \n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn-cancel\" (click)=\"closePdfViewer($event)\">Cerrar</button>\n          @if (selectedReport) {\n            <button type=\"button\" class=\"btn-download\" (click)=\"startDownload(selectedReport, $event)\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\n                <polyline points=\"7 10 12 15 17 10\"></polyline>\n                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\n              </svg>\n              Descargar PDF\n            </button>\n          }\n        </div>\n      </div>\n    </div>\n  }\n</div>"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r0", "errorMessage", "successMessage", "\u0275\u0275property", "empresa_r2", "IdEmpresa", "\u0275\u0275textInterpolate", "Nombre", "fecha_r3", "prioridad_r4", "\u0275\u0275classMap", "getPriorityClass", "task_r5", "priority", "getImageCount", "location", "getDepartamentoName", "departamento", "descripcionCompletado", "materialesUtilizados", "\u0275\u0275propertyInterpolate1", "$index_r8", "img_r7", "\u0275\u0275sanitizeUrl", "\u0275\u0275template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_33_For_5_Conditional_0_Template", "\u0275\u0275conditional", "\u0275\u0275repeaterCreate", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_33_For_5_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "evidenceImages", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_7_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_8_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_9_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_24_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_25_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_31_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_32_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_33_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_35_Template", "WorkerCompleteTaskComponent_Conditional_56_For_2_Conditional_36_Template", "Tipo_Trabajo", "getStatusClass", "estado", "pdfUrl", "reporteGenerado", "hasImages", "formatDate", "fechaCompletado", "fecha", "getEmpresaName", "jobDescription", "firmaDigital", "WorkerCompleteTaskComponent_Conditional_56_For_2_Template", "_forTrack1", "filteredTasks", "\u0275\u0275sanitizeResourceUrl", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r10", "\u0275\u0275nextContext", "\u0275\u0275resetView", "startDownload", "selectedReport", "_r9", "closePdfViewer", "i0", "stopPropagation", "WorkerCompleteTaskComponent_Conditional_57_Conditional_10_Template", "WorkerCompleteTaskComponent_Conditional_57_Conditional_11_Template", "WorkerCompleteTaskComponent_Conditional_57_Conditional_15_Template", "WorkerCompleteTaskComponent", "firestore", "inject", "Firestore", "auth", "Auth", "router", "Router", "taskService", "TaskService", "sanitizer", "DomSanitizer", "completedTasks", "currentUser", "isLoading", "showPdfViewer", "subscriptions", "empresas", "departamentos", "selectedEmpresa", "selectedFecha", "selectedPrioridad", "selectedDepartamento", "searchQuery", "fechasDisponibles", "prioridadesDisponibles", "departamentosDisponibles", "ngOnInit", "setupAuthListener", "loadEmpresas", "loadDepartamentos", "ngOnDestroy", "forEach", "sub", "unsubscribe", "revokeObjectURL", "deptosRef", "collection", "subscription", "collectionData", "idField", "pipe", "map", "d", "console", "log", "catchError", "error", "of", "subscribe", "push", "empresasRef", "safeUrl", "match", "toString", "URL", "authSub", "onAuthStateChanged", "user", "__async", "email", "loadUserData", "uid", "navigate", "Subscription", "userId", "userDoc", "getDoc", "doc", "exists", "__spreadProps", "__spreadValues", "data", "IdUsuario", "loadCompletedReportes", "Error", "getCompletedReportesByWorker", "tap", "reportes", "applyFilters", "from", "departamentoId", "find", "IdDepartamento", "filteredResults", "filter", "task", "today", "Date", "setHours", "weekStart", "setDate", "getDate", "getDay", "monthStart", "getFullYear", "getMonth", "taskDate", "getTime", "selectedDept", "trim", "query", "toLowerCase", "includes", "updateEmpresaFilter", "empresa", "updateFechaFilter", "updatePrioridadFilter", "prioridad", "updateDepartamentoFilter", "updateSearchQuery", "clearFilters", "goBack", "event", "preventDefault", "date", "seconds", "toLocaleDateString", "year", "month", "day", "getSafeUrl", "url", "bypassSecurityTrustResourceUrl", "status", "empresaId", "e", "openPdfViewer", "report", "loadPdfFromStorage", "IdReporte", "storage", "getStorage", "pdfPath", "pdfRef", "ref", "downloadURL", "getDownloadURL", "updateReporteWithPdfInfo", "updateError", "setTimeout", "window", "open", "createSafePdfLink", "fileName", "link", "document", "createElement", "href", "download", "target", "rel", "preventDefaultAndExecute", "callback", "Array", "isArray", "length", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "WorkerCompleteTaskComponent_Conditional_8_Template", "WorkerCompleteTaskComponent_Conditional_9_Template", "WorkerCompleteTaskComponent_Conditional_10_Template", "\u0275\u0275twoWayListener", "\u0275\u0275twoWayBindingSet", "WorkerCompleteTaskComponent_For_28_Template", "_forTrack0", "WorkerCompleteTaskComponent_For_39_Template", "\u0275\u0275repeaterTrackByIdentity", "WorkerCompleteTaskComponent_For_49_Template", "WorkerCompleteTaskComponent_Conditional_55_Template", "WorkerCompleteTaskComponent_Conditional_56_Template", "WorkerCompleteTaskComponent_Conditional_57_Template", "\u0275\u0275twoWayProperty", "CommonModule", "FormsModule", "NgSelectOption", "\u0275NgSelectMultipleOption", "DefaultValueAccessor", "SelectControlValueAccessor", "NgControlStatus", "NgModel", "PdfViewerModule", "styles"]
}
